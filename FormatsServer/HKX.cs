// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: HKX.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SOULS.HKX {

  /// <summary>Holder for reflection information generated from HKX.proto</summary>
  public static partial class HKXReflection {

    #region Descriptor
    /// <summary>File descriptor for HKX.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HKXReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglIS1gucHJvdG8SCVNPVUxTLkhLWBoNVmVjdG9yNC5wcm90byJXCgpMb2Nh",
            "bEZpeHVwEgsKA1NyYxgBIAEoDRILCgNEc3QYAiABKA0SLwoJUmVmZXJlbmNl",
            "GAMgASgLMhwuU09VTFMuSEtYLkhLWExvY2FsUmVmZXJlbmNlInIKC0dsb2Jh",
            "bEZpeHVwEgsKA1NyYxgBIAEoDRIXCg9Ec3RTZWN0aW9uSW5kZXgYAiABKA0S",
            "CwoDRHN0GAMgASgNEjAKCVJlZmVyZW5jZRgEIAEoCzIdLlNPVUxTLkhLWC5I",
            "S1hHbG9iYWxSZWZlcmVuY2UiRQoMVmlydHVhbEZpeHVwEgsKA1NyYxgBIAEo",
            "DRIUCgxTZWN0aW9uSW5kZXgYAiABKA0SEgoKTmFtZU9mZnNldBgDIAEoDSLF",
            "AQoRSEtYTG9jYWxSZWZlcmVuY2USJgoHU2VjdGlvbhgBIAEoCzIVLlNPVUxT",
            "LkhLWC5IS1hTZWN0aW9uEhkKEVNvdXJjZUxvY2FsT2Zmc2V0GAIgASgNEhcK",
            "D0Rlc3RMb2NhbE9mZnNldBgDIAEoDRIqCgxTb3VyY2VPYmplY3QYBCABKAsy",
            "FC5TT1VMUy5IS1guSEtYT2JqZWN0EigKCkRlc3RPYmplY3QYBSABKAsyFC5T",
            "T1VMUy5IS1guSEtYT2JqZWN0IvUBChJIS1hHbG9iYWxSZWZlcmVuY2USKQoK",
            "U3JjU2VjdGlvbhgBIAEoCzIVLlNPVUxTLkhLWC5IS1hTZWN0aW9uEioKC0Rl",
            "c3RTZWN0aW9uGAIgASgLMhUuU09VTFMuSEtYLkhLWFNlY3Rpb24SGQoRU291",
            "cmNlTG9jYWxPZmZzZXQYAyABKA0SFwoPRGVzdExvY2FsT2Zmc2V0GAQgASgN",
            "EioKDFNvdXJjZU9iamVjdBgFIAEoCzIULlNPVUxTLkhLWC5IS1hPYmplY3QS",
            "KAoKRGVzdE9iamVjdBgGIAEoCzIULlNPVUxTLkhLWC5IS1hPYmplY3QimQEK",
            "E0hLWFZpcnR1YWxSZWZlcmVuY2USKgoMU291cmNlT2JqZWN0GAEgASgLMhQu",
            "U09VTFMuSEtYLkhLWE9iamVjdBIqCgtEZXN0U2VjdGlvbhgCIAEoCzIVLlNP",
            "VUxTLkhLWC5IS1hTZWN0aW9uEioKCUNsYXNzTmFtZRgDIAEoCzIXLlNPVUxT",
            "LkhLWC5IS1hDbGFzc05hbWUiNAoJSEtYT2JqZWN0EhUKDVNlY3Rpb25PZmZz",
            "ZXQYASABKA0SEAoIRGF0YVNpemUYAiABKA0iHwoMSEtYVmFyaWF0aW9uEg8K",
            "B3ZhbHVlX18YASABKAUiJQoSQW5pbWF0aW9uQmxlbmRIaW50Eg8KB3ZhbHVl",
            "X18YASABKA0iIAoNQW5pbWF0aW9uVHlwZRIPCgd2YWx1ZV9fGAEgASgNIhcK",
            "B0hLU2hvcnQSDAoEZGF0YRgBIAEoBSILCglIS0NTdHJpbmciQwoEQm9uZRIi",
            "CgROYW1lGAEgASgLMhQuU09VTFMuSEtYLkhLQ1N0cmluZxIXCg9Mb2NrVHJh",
            "bnNsYXRpb24YAiABKAUiMwoJSEtWZWN0b3I0EiYKBlZlY3RvchgBIAEoCzIW",
            "LlNPVUxTLlZlY3RvcjQuVmVjdG9yNCKAAQoJVHJhbnNmb3JtEiYKCFBvc2l0",
            "aW9uGAEgASgLMhQuU09VTFMuSEtYLkhLVmVjdG9yNBImCghSb3RhdGlvbhgC",
            "IAEoCzIULlNPVUxTLkhLWC5IS1ZlY3RvcjQSIwoFU2NhbGUYAyABKAsyFC5T",
            "T1VMUy5IS1guSEtWZWN0b3I0IhcKB0hLRmxvYXQSDAoEZGF0YRgBIAEoAiIW",
            "CgZIS1VJbnQSDAoEZGF0YRgBIAEoDSIWCgZIS0J5dGUSDAoEZGF0YRgBIAEo",
            "BSLUBAoKSEtYU2VjdGlvbhIRCglTZWN0aW9uSUQYASABKAUSEgoKU2VjdGlv",
            "blRhZxgCIAEoCRIZChFBYnNvbHV0ZURhdGFTdGFydBgDIAEoDRIZChFMb2Nh",
            "bEZpeHVwc09mZnNldBgEIAEoDRIaChJHbG9iYWxGaXh1cHNPZmZzZXQYBSAB",
            "KA0SGwoTVmlydHVhbEZpeHVwc09mZnNldBgGIAEoDRIVCg1FeHBvcnRzT2Zm",
            "c2V0GAcgASgNEhUKDUltcG9ydHNPZmZzZXQYCCABKA0SEQoJRW5kT2Zmc2V0",
            "GAkgASgNEioKC0xvY2FsRml4dXBzGAogAygLMhUuU09VTFMuSEtYLkxvY2Fs",
            "Rml4dXASLAoMR2xvYmFsRml4dXBzGAsgAygLMhYuU09VTFMuSEtYLkdsb2Jh",
            "bEZpeHVwEi4KDVZpcnR1YWxGaXh1cHMYDCADKAsyFy5TT1VMUy5IS1guVmly",
            "dHVhbEZpeHVwEjUKD0xvY2FsUmVmZXJlbmNlcxgNIAMoCzIcLlNPVUxTLkhL",
            "WC5IS1hMb2NhbFJlZmVyZW5jZRI3ChBHbG9iYWxSZWZlcmVuY2VzGA4gAygL",
            "Mh0uU09VTFMuSEtYLkhLWEdsb2JhbFJlZmVyZW5jZRI5ChFWaXJ0dWFsUmVm",
            "ZXJlbmNlcxgPIAMoCzIeLlNPVUxTLkhLWC5IS1hWaXJ0dWFsUmVmZXJlbmNl",
            "EiUKB09iamVjdHMYECADKAsyFC5TT1VMUy5IS1guSEtYT2JqZWN0EhMKC1Nl",
            "Y3Rpb25EYXRhGBEgAygFIksKDEhLWENsYXNzTmFtZRIRCglTaWduYXR1cmUY",
            "ASABKA0SEQoJQ2xhc3NOYW1lGAIgASgJEhUKDVNlY3Rpb25PZmZzZXQYAyAB",
            "KA0izgMKCUhLWEhlYWRlchIOCgZNYWdpYzAYASABKA0SDgoGTWFnaWMxGAIg",
            "ASgNEg8KB1VzZXJUYWcYAyABKAUSDwoHVmVyc2lvbhgEIAEoBRITCgtQb2lu",
            "dGVyU2l6ZRgFIAEoBRIOCgZFbmRpYW4YBiABKAUSFQoNUGFkZGluZ09wdGlv",
            "bhgHIAEoBRIRCglCYXNlQ2xhc3MYCCABKAUSFAoMU2VjdGlvbkNvdW50GAkg",
            "ASgFEhwKFENvbnRlbnRzU2VjdGlvbkluZGV4GAogASgFEh0KFUNvbnRlbnRz",
            "U2VjdGlvbk9mZnNldBgLIAEoBRIlCh1Db250ZW50c0NsYXNzTmFtZVNlY3Rp",
            "b25JbmRleBgMIAEoBRImCh5Db250ZW50c0NsYXNzTmFtZVNlY3Rpb25PZmZz",
            "ZXQYDSABKAUSHQoVQ29udGVudHNWZXJzaW9uU3RyaW5nGA4gASgJEg0KBUZs",
            "YWdzGA8gASgFEg0KBVVuazNDGBAgASgFEhUKDVNlY3Rpb25PZmZzZXQYESAB",
            "KAUSDQoFVW5rNDAYEiABKA0SDQoFVW5rNDQYEyABKA0SDQoFVW5rNDgYFCAB",
            "KA0SDQoFVW5rNEMYFSABKA0iigEKEEhLQXJyYXlfX0hLU2hvcnQSDAoEU2l6",
            "ZRgBIAEoDRIQCghDYXBhY2l0eRgCIAEoDRINCgVGbGFncxgDIAEoBRIlCglB",
            "cnJheURhdGEYBCADKAsyEi5TT1VMUy5IS1guSEtTaG9ydBIgCgRJdGVtGAUg",
            "ASgLMhIuU09VTFMuSEtYLkhLU2hvcnQigQEKDUhLQXJyYXlfX0JvbmUSDAoE",
            "U2l6ZRgBIAEoDRIQCghDYXBhY2l0eRgCIAEoDRINCgVGbGFncxgDIAEoBRIi",
            "CglBcnJheURhdGEYBCADKAsyDy5TT1VMUy5IS1guQm9uZRIdCgRJdGVtGAUg",
            "ASgLMg8uU09VTFMuSEtYLkJvbmUikAEKEkhLQXJyYXlfX1RyYW5zZm9ybRIM",
            "CgRTaXplGAEgASgNEhAKCENhcGFjaXR5GAIgASgNEg0KBUZsYWdzGAMgASgF",
            "EicKCUFycmF5RGF0YRgEIAMoCzIULlNPVUxTLkhLWC5UcmFuc2Zvcm0SIgoE",
            "SXRlbRgFIAEoCzIULlNPVUxTLkhLWC5UcmFuc2Zvcm0iigEKEEhLQXJyYXlf",
            "X0hLRmxvYXQSDAoEU2l6ZRgBIAEoDRIQCghDYXBhY2l0eRgCIAEoDRINCgVG",
            "bGFncxgDIAEoBRIlCglBcnJheURhdGEYBCADKAsyEi5TT1VMUy5IS1guSEtG",
            "bG9hdBIgCgRJdGVtGAUgASgLMhIuU09VTFMuSEtYLkhLRmxvYXQihwEKD0hL",
            "QXJyYXlfX0hLVUludBIMCgRTaXplGAEgASgNEhAKCENhcGFjaXR5GAIgASgN",
            "Eg0KBUZsYWdzGAMgASgFEiQKCUFycmF5RGF0YRgEIAMoCzIRLlNPVUxTLkhL",
            "WC5IS1VJbnQSHwoESXRlbRgFIAEoCzIRLlNPVUxTLkhLWC5IS1VJbnQihwEK",
            "D0hLQXJyYXlfX0hLQnl0ZRIMCgRTaXplGAEgASgNEhAKCENhcGFjaXR5GAIg",
            "ASgNEg0KBUZsYWdzGAMgASgFEiQKCUFycmF5RGF0YRgEIAMoCzIRLlNPVUxT",
            "LkhLWC5IS0J5dGUSHwoESXRlbRgFIAEoCzIRLlNPVUxTLkhLWC5IS0J5dGUi",
            "kAEKEkhLQXJyYXlfX0hLVmVjdG9yNBIMCgRTaXplGAEgASgNEhAKCENhcGFj",
            "aXR5GAIgASgNEg0KBUZsYWdzGAMgASgFEicKCUFycmF5RGF0YRgEIAMoCzIU",
            "LlNPVUxTLkhLWC5IS1ZlY3RvcjQSIgoESXRlbRgFIAEoCzIULlNPVUxTLkhL",
            "WC5IS1ZlY3RvcjQioAIKC0hLQVNrZWxldG9uEiIKBE5hbWUYASABKAsyFC5T",
            "T1VMUy5IS1guSEtDU3RyaW5nEjIKDVBhcmVudEluZGljZXMYAiABKAsyGy5T",
            "T1VMUy5IS1guSEtBcnJheV9fSEtTaG9ydBInCgVCb25lcxgDIAEoCzIYLlNP",
            "VUxTLkhLWC5IS0FycmF5X19Cb25lEjEKClRyYW5zZm9ybXMYBCABKAsyHS5T",
            "T1VMUy5IS1guSEtBcnJheV9fVHJhbnNmb3JtEjQKD1JlZmVyZW5jZUZsb2F0",
            "cxgFIAEoCzIbLlNPVUxTLkhLWC5IS0FycmF5X19IS0Zsb2F0EhUKDVNlY3Rp",
            "b25PZmZzZXQYBiABKA0SEAoIRGF0YVNpemUYByABKA0i+QQKHEhLQVNwbGlu",
            "ZUNvbXByZXNzZWRBbmltYXRpb24SLwoNQW5pbWF0aW9uVHlwZRgBIAEoCzIY",
            "LlNPVUxTLkhLWC5BbmltYXRpb25UeXBlEhAKCER1cmF0aW9uGAIgASgCEhsK",
            "E1RyYW5zZm9ybVRyYWNrQ291bnQYAyABKAUSFwoPRmxvYXRUcmFja0NvdW50",
            "GAQgASgFEhIKCkZyYW1lQ291bnQYBSABKAUSEgoKQmxvY2tDb3VudBgGIAEo",
            "BRIWCg5GcmFtZXNQZXJCbG9jaxgHIAEoBRIbChNNYXNrQW5kUXVhbnRpemF0",
            "aW9uGAggASgNEhUKDUJsb2NrRHVyYXRpb24YCSABKAISHAoUSW52ZXJzZUJs",
            "b2NrRHVyYXRpb24YCiABKAISFQoNRnJhbWVEdXJhdGlvbhgLIAEoAhIwCgxC",
            "bG9ja09mZnNldHMYDCABKAsyGi5TT1VMUy5IS1guSEtBcnJheV9fSEtVSW50",
            "EjUKEUZsb2F0QmxvY2tPZmZzZXRzGA0gASgLMhouU09VTFMuSEtYLkhLQXJy",
            "YXlfX0hLVUludBI5ChVUcmFuc2Zvcm1CbG9ja09mZnNldHMYDiABKAsyGi5T",
            "T1VMUy5IS1guSEtBcnJheV9fSEtVSW50EjAKDEZsb2F0T2Zmc2V0cxgPIAEo",
            "CzIaLlNPVUxTLkhLWC5IS0FycmF5X19IS1VJbnQSKAoERGF0YRgQIAEoCzIa",
            "LlNPVUxTLkhLWC5IS0FycmF5X19IS0J5dGUSDgoGRW5kaWFuGBEgASgFEhUK",
            "DVNlY3Rpb25PZmZzZXQYEiABKA0SEAoIRGF0YVNpemUYEyABKA0iygIKE0hL",
            "QUFuaW1hdGlvbkJpbmRpbmcSQAobVHJhbnNmb3JtVHJhY2tUb0JvbmVJbmRp",
            "Y2VzGAEgASgLMhsuU09VTFMuSEtYLkhLQXJyYXlfX0hLU2hvcnQSQQocRmxv",
            "YXRUcmFja1RvRmxvYXRTbG90SW5kaWNlcxgCIAEoCzIbLlNPVUxTLkhLWC5I",
            "S0FycmF5X19IS1Nob3J0EjUKEFBhcnRpdGlvbkluZGljZXMYAyABKAsyGy5T",
            "T1VMUy5IS1guSEtBcnJheV9fSEtTaG9ydBIwCglCbGVuZEhpbnQYBCABKAsy",
            "HS5TT1VMUy5IS1guQW5pbWF0aW9uQmxlbmRIaW50EhwKFE9yaWdpbmFsU2tl",
            "bGV0b25OYW1lGAUgASgJEhUKDVNlY3Rpb25PZmZzZXQYBiABKA0SEAoIRGF0",
            "YVNpemUYByABKA0i6AEKIEhLQURlZmF1bHRBbmltYXRlZFJlZmVyZW5jZUZy",
            "YW1lEiIKAlVwGAEgASgLMhYuU09VTFMuVmVjdG9yNC5WZWN0b3I0EicKB0Zv",
            "cndhcmQYAiABKAsyFi5TT1VMUy5WZWN0b3I0LlZlY3RvcjQSEAoIRHVyYXRp",
            "b24YAyABKAISPAoVUmVmZXJlbmNlRnJhbWVTYW1wbGVzGAQgASgLMh0uU09V",
            "TFMuSEtYLkhLQXJyYXlfX0hLVmVjdG9yNBIVCg1TZWN0aW9uT2Zmc2V0GAUg",
            "ASgNEhAKCERhdGFTaXplGAYgASgNIhIKEElIS1hTZXJpYWxpemFibGUiRgoN",
            "SEtDU3RyaW5nRGF0YRIMCgREYXRhGAEgASgJEhUKDVNlY3Rpb25PZmZzZXQY",
            "AiABKA0SEAoIRGF0YVNpemUYAyABKA0iGAoISEtVU2hvcnQSDAoEZGF0YRgB",
            "IAEoDSJKChBIS1hHZW5lcmljT2JqZWN0Eg0KBUJ5dGVzGAEgAygFEhUKDVNl",
            "Y3Rpb25PZmZzZXQYAiABKA0SEAoIRGF0YVNpemUYAyABKA0iigIKDUhLWENs",
            "YXNzTmFtZXMSKwoKQ2xhc3NOYW1lcxgBIAMoCzIXLlNPVUxTLkhLWC5IS1hD",
            "bGFzc05hbWUSTgoTT2Zmc2V0Q2xhc3NOYW1lc01hcBgCIAMoCzIxLlNPVUxT",
            "LkhLWC5IS1hDbGFzc05hbWVzLk9mZnNldENsYXNzTmFtZXNNYXBFbnRyeRIV",
            "Cg1TZWN0aW9uT2Zmc2V0GAMgASgNEhAKCERhdGFTaXplGAQgASgNGlMKGE9m",
            "ZnNldENsYXNzTmFtZXNNYXBFbnRyeRILCgNrZXkYASABKA0SJgoFdmFsdWUY",
            "AiABKAsyFy5TT1VMUy5IS1guSEtYQ2xhc3NOYW1lOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SOULS.Vector4.Vector4Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.LocalFixup), global::SOULS.HKX.LocalFixup.Parser, new[]{ "Src", "Dst", "Reference" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.GlobalFixup), global::SOULS.HKX.GlobalFixup.Parser, new[]{ "Src", "DstSectionIndex", "Dst", "Reference" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.VirtualFixup), global::SOULS.HKX.VirtualFixup.Parser, new[]{ "Src", "SectionIndex", "NameOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXLocalReference), global::SOULS.HKX.HKXLocalReference.Parser, new[]{ "Section", "SourceLocalOffset", "DestLocalOffset", "SourceObject", "DestObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXGlobalReference), global::SOULS.HKX.HKXGlobalReference.Parser, new[]{ "SrcSection", "DestSection", "SourceLocalOffset", "DestLocalOffset", "SourceObject", "DestObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXVirtualReference), global::SOULS.HKX.HKXVirtualReference.Parser, new[]{ "SourceObject", "DestSection", "ClassName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXObject), global::SOULS.HKX.HKXObject.Parser, new[]{ "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXVariation), global::SOULS.HKX.HKXVariation.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.AnimationBlendHint), global::SOULS.HKX.AnimationBlendHint.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.AnimationType), global::SOULS.HKX.AnimationType.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKShort), global::SOULS.HKX.HKShort.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKCString), global::SOULS.HKX.HKCString.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.Bone), global::SOULS.HKX.Bone.Parser, new[]{ "Name", "LockTranslation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKVector4), global::SOULS.HKX.HKVector4.Parser, new[]{ "Vector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.Transform), global::SOULS.HKX.Transform.Parser, new[]{ "Position", "Rotation", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKFloat), global::SOULS.HKX.HKFloat.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKUInt), global::SOULS.HKX.HKUInt.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKByte), global::SOULS.HKX.HKByte.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXSection), global::SOULS.HKX.HKXSection.Parser, new[]{ "SectionID", "SectionTag", "AbsoluteDataStart", "LocalFixupsOffset", "GlobalFixupsOffset", "VirtualFixupsOffset", "ExportsOffset", "ImportsOffset", "EndOffset", "LocalFixups", "GlobalFixups", "VirtualFixups", "LocalReferences", "GlobalReferences", "VirtualReferences", "Objects", "SectionData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXClassName), global::SOULS.HKX.HKXClassName.Parser, new[]{ "Signature", "ClassName", "SectionOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXHeader), global::SOULS.HKX.HKXHeader.Parser, new[]{ "Magic0", "Magic1", "UserTag", "Version", "PointerSize", "Endian", "PaddingOption", "BaseClass", "SectionCount", "ContentsSectionIndex", "ContentsSectionOffset", "ContentsClassNameSectionIndex", "ContentsClassNameSectionOffset", "ContentsVersionString", "Flags", "Unk3C", "SectionOffset", "Unk40", "Unk44", "Unk48", "Unk4C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__HKShort), global::SOULS.HKX.HKArray__HKShort.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__Bone), global::SOULS.HKX.HKArray__Bone.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__Transform), global::SOULS.HKX.HKArray__Transform.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__HKFloat), global::SOULS.HKX.HKArray__HKFloat.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__HKUInt), global::SOULS.HKX.HKArray__HKUInt.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__HKByte), global::SOULS.HKX.HKArray__HKByte.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKArray__HKVector4), global::SOULS.HKX.HKArray__HKVector4.Parser, new[]{ "Size", "Capacity", "Flags", "ArrayData", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKASkeleton), global::SOULS.HKX.HKASkeleton.Parser, new[]{ "Name", "ParentIndices", "Bones", "Transforms", "ReferenceFloats", "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKASplineCompressedAnimation), global::SOULS.HKX.HKASplineCompressedAnimation.Parser, new[]{ "AnimationType", "Duration", "TransformTrackCount", "FloatTrackCount", "FrameCount", "BlockCount", "FramesPerBlock", "MaskAndQuantization", "BlockDuration", "InverseBlockDuration", "FrameDuration", "BlockOffsets", "FloatBlockOffsets", "TransformBlockOffsets", "FloatOffsets", "Data", "Endian", "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKAAnimationBinding), global::SOULS.HKX.HKAAnimationBinding.Parser, new[]{ "TransformTrackToBoneIndices", "FloatTrackToFloatSlotIndices", "PartitionIndices", "BlendHint", "OriginalSkeletonName", "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKADefaultAnimatedReferenceFrame), global::SOULS.HKX.HKADefaultAnimatedReferenceFrame.Parser, new[]{ "Up", "Forward", "Duration", "ReferenceFrameSamples", "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.IHKXSerializable), global::SOULS.HKX.IHKXSerializable.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKCStringData), global::SOULS.HKX.HKCStringData.Parser, new[]{ "Data", "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKUShort), global::SOULS.HKX.HKUShort.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXGenericObject), global::SOULS.HKX.HKXGenericObject.Parser, new[]{ "Bytes", "SectionOffset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.HKX.HKXClassNames), global::SOULS.HKX.HKXClassNames.Parser, new[]{ "ClassNames", "OffsetClassNamesMap", "SectionOffset", "DataSize" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LocalFixup : pb::IMessage<LocalFixup> {
    private static readonly pb::MessageParser<LocalFixup> _parser = new pb::MessageParser<LocalFixup>(() => new LocalFixup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalFixup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalFixup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalFixup(LocalFixup other) : this() {
      src_ = other.src_;
      dst_ = other.dst_;
      reference_ = other.reference_ != null ? other.reference_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalFixup Clone() {
      return new LocalFixup(this);
    }

    /// <summary>Field number for the "Src" field.</summary>
    public const int SrcFieldNumber = 1;
    private uint src_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Src {
      get { return src_; }
      set {
        src_ = value;
      }
    }

    /// <summary>Field number for the "Dst" field.</summary>
    public const int DstFieldNumber = 2;
    private uint dst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dst {
      get { return dst_; }
      set {
        dst_ = value;
      }
    }

    /// <summary>Field number for the "Reference" field.</summary>
    public const int ReferenceFieldNumber = 3;
    private global::SOULS.HKX.HKXLocalReference reference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXLocalReference Reference {
      get { return reference_; }
      set {
        reference_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalFixup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalFixup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Src != other.Src) return false;
      if (Dst != other.Dst) return false;
      if (!object.Equals(Reference, other.Reference)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Src != 0) hash ^= Src.GetHashCode();
      if (Dst != 0) hash ^= Dst.GetHashCode();
      if (reference_ != null) hash ^= Reference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Src != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Src);
      }
      if (Dst != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Dst);
      }
      if (reference_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Reference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Src != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Src);
      }
      if (Dst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dst);
      }
      if (reference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalFixup other) {
      if (other == null) {
        return;
      }
      if (other.Src != 0) {
        Src = other.Src;
      }
      if (other.Dst != 0) {
        Dst = other.Dst;
      }
      if (other.reference_ != null) {
        if (reference_ == null) {
          Reference = new global::SOULS.HKX.HKXLocalReference();
        }
        Reference.MergeFrom(other.Reference);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Src = input.ReadUInt32();
            break;
          }
          case 16: {
            Dst = input.ReadUInt32();
            break;
          }
          case 26: {
            if (reference_ == null) {
              Reference = new global::SOULS.HKX.HKXLocalReference();
            }
            input.ReadMessage(Reference);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GlobalFixup : pb::IMessage<GlobalFixup> {
    private static readonly pb::MessageParser<GlobalFixup> _parser = new pb::MessageParser<GlobalFixup>(() => new GlobalFixup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalFixup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalFixup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalFixup(GlobalFixup other) : this() {
      src_ = other.src_;
      dstSectionIndex_ = other.dstSectionIndex_;
      dst_ = other.dst_;
      reference_ = other.reference_ != null ? other.reference_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalFixup Clone() {
      return new GlobalFixup(this);
    }

    /// <summary>Field number for the "Src" field.</summary>
    public const int SrcFieldNumber = 1;
    private uint src_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Src {
      get { return src_; }
      set {
        src_ = value;
      }
    }

    /// <summary>Field number for the "DstSectionIndex" field.</summary>
    public const int DstSectionIndexFieldNumber = 2;
    private uint dstSectionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstSectionIndex {
      get { return dstSectionIndex_; }
      set {
        dstSectionIndex_ = value;
      }
    }

    /// <summary>Field number for the "Dst" field.</summary>
    public const int DstFieldNumber = 3;
    private uint dst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dst {
      get { return dst_; }
      set {
        dst_ = value;
      }
    }

    /// <summary>Field number for the "Reference" field.</summary>
    public const int ReferenceFieldNumber = 4;
    private global::SOULS.HKX.HKXGlobalReference reference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXGlobalReference Reference {
      get { return reference_; }
      set {
        reference_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalFixup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalFixup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Src != other.Src) return false;
      if (DstSectionIndex != other.DstSectionIndex) return false;
      if (Dst != other.Dst) return false;
      if (!object.Equals(Reference, other.Reference)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Src != 0) hash ^= Src.GetHashCode();
      if (DstSectionIndex != 0) hash ^= DstSectionIndex.GetHashCode();
      if (Dst != 0) hash ^= Dst.GetHashCode();
      if (reference_ != null) hash ^= Reference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Src != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Src);
      }
      if (DstSectionIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DstSectionIndex);
      }
      if (Dst != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Dst);
      }
      if (reference_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Reference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Src != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Src);
      }
      if (DstSectionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstSectionIndex);
      }
      if (Dst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dst);
      }
      if (reference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalFixup other) {
      if (other == null) {
        return;
      }
      if (other.Src != 0) {
        Src = other.Src;
      }
      if (other.DstSectionIndex != 0) {
        DstSectionIndex = other.DstSectionIndex;
      }
      if (other.Dst != 0) {
        Dst = other.Dst;
      }
      if (other.reference_ != null) {
        if (reference_ == null) {
          Reference = new global::SOULS.HKX.HKXGlobalReference();
        }
        Reference.MergeFrom(other.Reference);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Src = input.ReadUInt32();
            break;
          }
          case 16: {
            DstSectionIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            Dst = input.ReadUInt32();
            break;
          }
          case 34: {
            if (reference_ == null) {
              Reference = new global::SOULS.HKX.HKXGlobalReference();
            }
            input.ReadMessage(Reference);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VirtualFixup : pb::IMessage<VirtualFixup> {
    private static readonly pb::MessageParser<VirtualFixup> _parser = new pb::MessageParser<VirtualFixup>(() => new VirtualFixup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VirtualFixup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualFixup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualFixup(VirtualFixup other) : this() {
      src_ = other.src_;
      sectionIndex_ = other.sectionIndex_;
      nameOffset_ = other.nameOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualFixup Clone() {
      return new VirtualFixup(this);
    }

    /// <summary>Field number for the "Src" field.</summary>
    public const int SrcFieldNumber = 1;
    private uint src_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Src {
      get { return src_; }
      set {
        src_ = value;
      }
    }

    /// <summary>Field number for the "SectionIndex" field.</summary>
    public const int SectionIndexFieldNumber = 2;
    private uint sectionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionIndex {
      get { return sectionIndex_; }
      set {
        sectionIndex_ = value;
      }
    }

    /// <summary>Field number for the "NameOffset" field.</summary>
    public const int NameOffsetFieldNumber = 3;
    private uint nameOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NameOffset {
      get { return nameOffset_; }
      set {
        nameOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VirtualFixup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VirtualFixup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Src != other.Src) return false;
      if (SectionIndex != other.SectionIndex) return false;
      if (NameOffset != other.NameOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Src != 0) hash ^= Src.GetHashCode();
      if (SectionIndex != 0) hash ^= SectionIndex.GetHashCode();
      if (NameOffset != 0) hash ^= NameOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Src != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Src);
      }
      if (SectionIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SectionIndex);
      }
      if (NameOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NameOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Src != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Src);
      }
      if (SectionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionIndex);
      }
      if (NameOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NameOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VirtualFixup other) {
      if (other == null) {
        return;
      }
      if (other.Src != 0) {
        Src = other.Src;
      }
      if (other.SectionIndex != 0) {
        SectionIndex = other.SectionIndex;
      }
      if (other.NameOffset != 0) {
        NameOffset = other.NameOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Src = input.ReadUInt32();
            break;
          }
          case 16: {
            SectionIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            NameOffset = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXLocalReference : pb::IMessage<HKXLocalReference> {
    private static readonly pb::MessageParser<HKXLocalReference> _parser = new pb::MessageParser<HKXLocalReference>(() => new HKXLocalReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXLocalReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXLocalReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXLocalReference(HKXLocalReference other) : this() {
      section_ = other.section_ != null ? other.section_.Clone() : null;
      sourceLocalOffset_ = other.sourceLocalOffset_;
      destLocalOffset_ = other.destLocalOffset_;
      sourceObject_ = other.sourceObject_ != null ? other.sourceObject_.Clone() : null;
      destObject_ = other.destObject_ != null ? other.destObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXLocalReference Clone() {
      return new HKXLocalReference(this);
    }

    /// <summary>Field number for the "Section" field.</summary>
    public const int SectionFieldNumber = 1;
    private global::SOULS.HKX.HKXSection section_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXSection Section {
      get { return section_; }
      set {
        section_ = value;
      }
    }

    /// <summary>Field number for the "SourceLocalOffset" field.</summary>
    public const int SourceLocalOffsetFieldNumber = 2;
    private uint sourceLocalOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceLocalOffset {
      get { return sourceLocalOffset_; }
      set {
        sourceLocalOffset_ = value;
      }
    }

    /// <summary>Field number for the "DestLocalOffset" field.</summary>
    public const int DestLocalOffsetFieldNumber = 3;
    private uint destLocalOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestLocalOffset {
      get { return destLocalOffset_; }
      set {
        destLocalOffset_ = value;
      }
    }

    /// <summary>Field number for the "SourceObject" field.</summary>
    public const int SourceObjectFieldNumber = 4;
    private global::SOULS.HKX.HKXObject sourceObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXObject SourceObject {
      get { return sourceObject_; }
      set {
        sourceObject_ = value;
      }
    }

    /// <summary>Field number for the "DestObject" field.</summary>
    public const int DestObjectFieldNumber = 5;
    private global::SOULS.HKX.HKXObject destObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXObject DestObject {
      get { return destObject_; }
      set {
        destObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXLocalReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXLocalReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Section, other.Section)) return false;
      if (SourceLocalOffset != other.SourceLocalOffset) return false;
      if (DestLocalOffset != other.DestLocalOffset) return false;
      if (!object.Equals(SourceObject, other.SourceObject)) return false;
      if (!object.Equals(DestObject, other.DestObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (section_ != null) hash ^= Section.GetHashCode();
      if (SourceLocalOffset != 0) hash ^= SourceLocalOffset.GetHashCode();
      if (DestLocalOffset != 0) hash ^= DestLocalOffset.GetHashCode();
      if (sourceObject_ != null) hash ^= SourceObject.GetHashCode();
      if (destObject_ != null) hash ^= DestObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (section_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Section);
      }
      if (SourceLocalOffset != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SourceLocalOffset);
      }
      if (DestLocalOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DestLocalOffset);
      }
      if (sourceObject_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SourceObject);
      }
      if (destObject_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DestObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (section_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Section);
      }
      if (SourceLocalOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceLocalOffset);
      }
      if (DestLocalOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestLocalOffset);
      }
      if (sourceObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceObject);
      }
      if (destObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXLocalReference other) {
      if (other == null) {
        return;
      }
      if (other.section_ != null) {
        if (section_ == null) {
          Section = new global::SOULS.HKX.HKXSection();
        }
        Section.MergeFrom(other.Section);
      }
      if (other.SourceLocalOffset != 0) {
        SourceLocalOffset = other.SourceLocalOffset;
      }
      if (other.DestLocalOffset != 0) {
        DestLocalOffset = other.DestLocalOffset;
      }
      if (other.sourceObject_ != null) {
        if (sourceObject_ == null) {
          SourceObject = new global::SOULS.HKX.HKXObject();
        }
        SourceObject.MergeFrom(other.SourceObject);
      }
      if (other.destObject_ != null) {
        if (destObject_ == null) {
          DestObject = new global::SOULS.HKX.HKXObject();
        }
        DestObject.MergeFrom(other.DestObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (section_ == null) {
              Section = new global::SOULS.HKX.HKXSection();
            }
            input.ReadMessage(Section);
            break;
          }
          case 16: {
            SourceLocalOffset = input.ReadUInt32();
            break;
          }
          case 24: {
            DestLocalOffset = input.ReadUInt32();
            break;
          }
          case 34: {
            if (sourceObject_ == null) {
              SourceObject = new global::SOULS.HKX.HKXObject();
            }
            input.ReadMessage(SourceObject);
            break;
          }
          case 42: {
            if (destObject_ == null) {
              DestObject = new global::SOULS.HKX.HKXObject();
            }
            input.ReadMessage(DestObject);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXGlobalReference : pb::IMessage<HKXGlobalReference> {
    private static readonly pb::MessageParser<HKXGlobalReference> _parser = new pb::MessageParser<HKXGlobalReference>(() => new HKXGlobalReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXGlobalReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXGlobalReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXGlobalReference(HKXGlobalReference other) : this() {
      srcSection_ = other.srcSection_ != null ? other.srcSection_.Clone() : null;
      destSection_ = other.destSection_ != null ? other.destSection_.Clone() : null;
      sourceLocalOffset_ = other.sourceLocalOffset_;
      destLocalOffset_ = other.destLocalOffset_;
      sourceObject_ = other.sourceObject_ != null ? other.sourceObject_.Clone() : null;
      destObject_ = other.destObject_ != null ? other.destObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXGlobalReference Clone() {
      return new HKXGlobalReference(this);
    }

    /// <summary>Field number for the "SrcSection" field.</summary>
    public const int SrcSectionFieldNumber = 1;
    private global::SOULS.HKX.HKXSection srcSection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXSection SrcSection {
      get { return srcSection_; }
      set {
        srcSection_ = value;
      }
    }

    /// <summary>Field number for the "DestSection" field.</summary>
    public const int DestSectionFieldNumber = 2;
    private global::SOULS.HKX.HKXSection destSection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXSection DestSection {
      get { return destSection_; }
      set {
        destSection_ = value;
      }
    }

    /// <summary>Field number for the "SourceLocalOffset" field.</summary>
    public const int SourceLocalOffsetFieldNumber = 3;
    private uint sourceLocalOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceLocalOffset {
      get { return sourceLocalOffset_; }
      set {
        sourceLocalOffset_ = value;
      }
    }

    /// <summary>Field number for the "DestLocalOffset" field.</summary>
    public const int DestLocalOffsetFieldNumber = 4;
    private uint destLocalOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestLocalOffset {
      get { return destLocalOffset_; }
      set {
        destLocalOffset_ = value;
      }
    }

    /// <summary>Field number for the "SourceObject" field.</summary>
    public const int SourceObjectFieldNumber = 5;
    private global::SOULS.HKX.HKXObject sourceObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXObject SourceObject {
      get { return sourceObject_; }
      set {
        sourceObject_ = value;
      }
    }

    /// <summary>Field number for the "DestObject" field.</summary>
    public const int DestObjectFieldNumber = 6;
    private global::SOULS.HKX.HKXObject destObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXObject DestObject {
      get { return destObject_; }
      set {
        destObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXGlobalReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXGlobalReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SrcSection, other.SrcSection)) return false;
      if (!object.Equals(DestSection, other.DestSection)) return false;
      if (SourceLocalOffset != other.SourceLocalOffset) return false;
      if (DestLocalOffset != other.DestLocalOffset) return false;
      if (!object.Equals(SourceObject, other.SourceObject)) return false;
      if (!object.Equals(DestObject, other.DestObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (srcSection_ != null) hash ^= SrcSection.GetHashCode();
      if (destSection_ != null) hash ^= DestSection.GetHashCode();
      if (SourceLocalOffset != 0) hash ^= SourceLocalOffset.GetHashCode();
      if (DestLocalOffset != 0) hash ^= DestLocalOffset.GetHashCode();
      if (sourceObject_ != null) hash ^= SourceObject.GetHashCode();
      if (destObject_ != null) hash ^= DestObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (srcSection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SrcSection);
      }
      if (destSection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DestSection);
      }
      if (SourceLocalOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SourceLocalOffset);
      }
      if (DestLocalOffset != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DestLocalOffset);
      }
      if (sourceObject_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SourceObject);
      }
      if (destObject_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DestObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (srcSection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SrcSection);
      }
      if (destSection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestSection);
      }
      if (SourceLocalOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceLocalOffset);
      }
      if (DestLocalOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestLocalOffset);
      }
      if (sourceObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceObject);
      }
      if (destObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXGlobalReference other) {
      if (other == null) {
        return;
      }
      if (other.srcSection_ != null) {
        if (srcSection_ == null) {
          SrcSection = new global::SOULS.HKX.HKXSection();
        }
        SrcSection.MergeFrom(other.SrcSection);
      }
      if (other.destSection_ != null) {
        if (destSection_ == null) {
          DestSection = new global::SOULS.HKX.HKXSection();
        }
        DestSection.MergeFrom(other.DestSection);
      }
      if (other.SourceLocalOffset != 0) {
        SourceLocalOffset = other.SourceLocalOffset;
      }
      if (other.DestLocalOffset != 0) {
        DestLocalOffset = other.DestLocalOffset;
      }
      if (other.sourceObject_ != null) {
        if (sourceObject_ == null) {
          SourceObject = new global::SOULS.HKX.HKXObject();
        }
        SourceObject.MergeFrom(other.SourceObject);
      }
      if (other.destObject_ != null) {
        if (destObject_ == null) {
          DestObject = new global::SOULS.HKX.HKXObject();
        }
        DestObject.MergeFrom(other.DestObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (srcSection_ == null) {
              SrcSection = new global::SOULS.HKX.HKXSection();
            }
            input.ReadMessage(SrcSection);
            break;
          }
          case 18: {
            if (destSection_ == null) {
              DestSection = new global::SOULS.HKX.HKXSection();
            }
            input.ReadMessage(DestSection);
            break;
          }
          case 24: {
            SourceLocalOffset = input.ReadUInt32();
            break;
          }
          case 32: {
            DestLocalOffset = input.ReadUInt32();
            break;
          }
          case 42: {
            if (sourceObject_ == null) {
              SourceObject = new global::SOULS.HKX.HKXObject();
            }
            input.ReadMessage(SourceObject);
            break;
          }
          case 50: {
            if (destObject_ == null) {
              DestObject = new global::SOULS.HKX.HKXObject();
            }
            input.ReadMessage(DestObject);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXVirtualReference : pb::IMessage<HKXVirtualReference> {
    private static readonly pb::MessageParser<HKXVirtualReference> _parser = new pb::MessageParser<HKXVirtualReference>(() => new HKXVirtualReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXVirtualReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXVirtualReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXVirtualReference(HKXVirtualReference other) : this() {
      sourceObject_ = other.sourceObject_ != null ? other.sourceObject_.Clone() : null;
      destSection_ = other.destSection_ != null ? other.destSection_.Clone() : null;
      className_ = other.className_ != null ? other.className_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXVirtualReference Clone() {
      return new HKXVirtualReference(this);
    }

    /// <summary>Field number for the "SourceObject" field.</summary>
    public const int SourceObjectFieldNumber = 1;
    private global::SOULS.HKX.HKXObject sourceObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXObject SourceObject {
      get { return sourceObject_; }
      set {
        sourceObject_ = value;
      }
    }

    /// <summary>Field number for the "DestSection" field.</summary>
    public const int DestSectionFieldNumber = 2;
    private global::SOULS.HKX.HKXSection destSection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXSection DestSection {
      get { return destSection_; }
      set {
        destSection_ = value;
      }
    }

    /// <summary>Field number for the "ClassName" field.</summary>
    public const int ClassNameFieldNumber = 3;
    private global::SOULS.HKX.HKXClassName className_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKXClassName ClassName {
      get { return className_; }
      set {
        className_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXVirtualReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXVirtualReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceObject, other.SourceObject)) return false;
      if (!object.Equals(DestSection, other.DestSection)) return false;
      if (!object.Equals(ClassName, other.ClassName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceObject_ != null) hash ^= SourceObject.GetHashCode();
      if (destSection_ != null) hash ^= DestSection.GetHashCode();
      if (className_ != null) hash ^= ClassName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceObject);
      }
      if (destSection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DestSection);
      }
      if (className_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ClassName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceObject);
      }
      if (destSection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestSection);
      }
      if (className_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXVirtualReference other) {
      if (other == null) {
        return;
      }
      if (other.sourceObject_ != null) {
        if (sourceObject_ == null) {
          SourceObject = new global::SOULS.HKX.HKXObject();
        }
        SourceObject.MergeFrom(other.SourceObject);
      }
      if (other.destSection_ != null) {
        if (destSection_ == null) {
          DestSection = new global::SOULS.HKX.HKXSection();
        }
        DestSection.MergeFrom(other.DestSection);
      }
      if (other.className_ != null) {
        if (className_ == null) {
          ClassName = new global::SOULS.HKX.HKXClassName();
        }
        ClassName.MergeFrom(other.ClassName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceObject_ == null) {
              SourceObject = new global::SOULS.HKX.HKXObject();
            }
            input.ReadMessage(SourceObject);
            break;
          }
          case 18: {
            if (destSection_ == null) {
              DestSection = new global::SOULS.HKX.HKXSection();
            }
            input.ReadMessage(DestSection);
            break;
          }
          case 26: {
            if (className_ == null) {
              ClassName = new global::SOULS.HKX.HKXClassName();
            }
            input.ReadMessage(ClassName);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXObject : pb::IMessage<HKXObject> {
    private static readonly pb::MessageParser<HKXObject> _parser = new pb::MessageParser<HKXObject>(() => new HKXObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXObject(HKXObject other) : this() {
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXObject Clone() {
      return new HKXObject(this);
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 1;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 2;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SectionOffset != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXObject other) {
      if (other == null) {
        return;
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 16: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXVariation : pb::IMessage<HKXVariation> {
    private static readonly pb::MessageParser<HKXVariation> _parser = new pb::MessageParser<HKXVariation>(() => new HKXVariation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXVariation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXVariation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXVariation(HKXVariation other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXVariation Clone() {
      return new HKXVariation(this);
    }

    /// <summary>Field number for the "value__" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXVariation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXVariation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXVariation other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationBlendHint : pb::IMessage<AnimationBlendHint> {
    private static readonly pb::MessageParser<AnimationBlendHint> _parser = new pb::MessageParser<AnimationBlendHint>(() => new AnimationBlendHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationBlendHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationBlendHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationBlendHint(AnimationBlendHint other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationBlendHint Clone() {
      return new AnimationBlendHint(this);
    }

    /// <summary>Field number for the "value__" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationBlendHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationBlendHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationBlendHint other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationType : pb::IMessage<AnimationType> {
    private static readonly pb::MessageParser<AnimationType> _parser = new pb::MessageParser<AnimationType>(() => new AnimationType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationType(AnimationType other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationType Clone() {
      return new AnimationType(this);
    }

    /// <summary>Field number for the "value__" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationType other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKShort : pb::IMessage<HKShort> {
    private static readonly pb::MessageParser<HKShort> _parser = new pb::MessageParser<HKShort>(() => new HKShort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKShort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKShort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKShort(HKShort other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKShort Clone() {
      return new HKShort(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private int data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKShort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKShort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKShort other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Data = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKCString : pb::IMessage<HKCString> {
    private static readonly pb::MessageParser<HKCString> _parser = new pb::MessageParser<HKCString>(() => new HKCString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKCString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKCString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKCString(HKCString other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKCString Clone() {
      return new HKCString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKCString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKCString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKCString other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Bone : pb::IMessage<Bone> {
    private static readonly pb::MessageParser<Bone> _parser = new pb::MessageParser<Bone>(() => new Bone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone(Bone other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      lockTranslation_ = other.lockTranslation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone Clone() {
      return new Bone(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::SOULS.HKX.HKCString name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKCString Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "LockTranslation" field.</summary>
    public const int LockTranslationFieldNumber = 2;
    private int lockTranslation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTranslation {
      get { return lockTranslation_; }
      set {
        lockTranslation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (LockTranslation != other.LockTranslation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (LockTranslation != 0) hash ^= LockTranslation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (LockTranslation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LockTranslation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (LockTranslation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockTranslation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bone other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::SOULS.HKX.HKCString();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.LockTranslation != 0) {
        LockTranslation = other.LockTranslation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::SOULS.HKX.HKCString();
            }
            input.ReadMessage(Name);
            break;
          }
          case 16: {
            LockTranslation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKVector4 : pb::IMessage<HKVector4> {
    private static readonly pb::MessageParser<HKVector4> _parser = new pb::MessageParser<HKVector4>(() => new HKVector4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKVector4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKVector4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKVector4(HKVector4 other) : this() {
      vector_ = other.vector_ != null ? other.vector_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKVector4 Clone() {
      return new HKVector4(this);
    }

    /// <summary>Field number for the "Vector" field.</summary>
    public const int VectorFieldNumber = 1;
    private global::SOULS.Vector4.Vector4 vector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector4.Vector4 Vector {
      get { return vector_; }
      set {
        vector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKVector4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKVector4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Vector, other.Vector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (vector_ != null) hash ^= Vector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (vector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (vector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKVector4 other) {
      if (other == null) {
        return;
      }
      if (other.vector_ != null) {
        if (vector_ == null) {
          Vector = new global::SOULS.Vector4.Vector4();
        }
        Vector.MergeFrom(other.Vector);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (vector_ == null) {
              Vector = new global::SOULS.Vector4.Vector4();
            }
            input.ReadMessage(Vector);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::SOULS.HKX.HKVector4 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKVector4 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::SOULS.HKX.HKVector4 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKVector4 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::SOULS.HKX.HKVector4 scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKVector4 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::SOULS.HKX.HKVector4();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::SOULS.HKX.HKVector4();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::SOULS.HKX.HKVector4();
        }
        Scale.MergeFrom(other.Scale);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::SOULS.HKX.HKVector4();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::SOULS.HKX.HKVector4();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            if (scale_ == null) {
              Scale = new global::SOULS.HKX.HKVector4();
            }
            input.ReadMessage(Scale);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKFloat : pb::IMessage<HKFloat> {
    private static readonly pb::MessageParser<HKFloat> _parser = new pb::MessageParser<HKFloat>(() => new HKFloat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKFloat(HKFloat other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKFloat Clone() {
      return new HKFloat(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private float data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Data);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKFloat other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0F) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Data = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKUInt : pb::IMessage<HKUInt> {
    private static readonly pb::MessageParser<HKUInt> _parser = new pb::MessageParser<HKUInt>(() => new HKUInt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKUInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKUInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKUInt(HKUInt other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKUInt Clone() {
      return new HKUInt(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private uint data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKUInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKUInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKUInt other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Data = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKByte : pb::IMessage<HKByte> {
    private static readonly pb::MessageParser<HKByte> _parser = new pb::MessageParser<HKByte>(() => new HKByte());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKByte> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKByte() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKByte(HKByte other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKByte Clone() {
      return new HKByte(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private int data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKByte);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKByte other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKByte other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Data = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXSection : pb::IMessage<HKXSection> {
    private static readonly pb::MessageParser<HKXSection> _parser = new pb::MessageParser<HKXSection>(() => new HKXSection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXSection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXSection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXSection(HKXSection other) : this() {
      sectionID_ = other.sectionID_;
      sectionTag_ = other.sectionTag_;
      absoluteDataStart_ = other.absoluteDataStart_;
      localFixupsOffset_ = other.localFixupsOffset_;
      globalFixupsOffset_ = other.globalFixupsOffset_;
      virtualFixupsOffset_ = other.virtualFixupsOffset_;
      exportsOffset_ = other.exportsOffset_;
      importsOffset_ = other.importsOffset_;
      endOffset_ = other.endOffset_;
      localFixups_ = other.localFixups_.Clone();
      globalFixups_ = other.globalFixups_.Clone();
      virtualFixups_ = other.virtualFixups_.Clone();
      localReferences_ = other.localReferences_.Clone();
      globalReferences_ = other.globalReferences_.Clone();
      virtualReferences_ = other.virtualReferences_.Clone();
      objects_ = other.objects_.Clone();
      sectionData_ = other.sectionData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXSection Clone() {
      return new HKXSection(this);
    }

    /// <summary>Field number for the "SectionID" field.</summary>
    public const int SectionIDFieldNumber = 1;
    private int sectionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionID {
      get { return sectionID_; }
      set {
        sectionID_ = value;
      }
    }

    /// <summary>Field number for the "SectionTag" field.</summary>
    public const int SectionTagFieldNumber = 2;
    private string sectionTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SectionTag {
      get { return sectionTag_; }
      set {
        sectionTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AbsoluteDataStart" field.</summary>
    public const int AbsoluteDataStartFieldNumber = 3;
    private uint absoluteDataStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbsoluteDataStart {
      get { return absoluteDataStart_; }
      set {
        absoluteDataStart_ = value;
      }
    }

    /// <summary>Field number for the "LocalFixupsOffset" field.</summary>
    public const int LocalFixupsOffsetFieldNumber = 4;
    private uint localFixupsOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalFixupsOffset {
      get { return localFixupsOffset_; }
      set {
        localFixupsOffset_ = value;
      }
    }

    /// <summary>Field number for the "GlobalFixupsOffset" field.</summary>
    public const int GlobalFixupsOffsetFieldNumber = 5;
    private uint globalFixupsOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalFixupsOffset {
      get { return globalFixupsOffset_; }
      set {
        globalFixupsOffset_ = value;
      }
    }

    /// <summary>Field number for the "VirtualFixupsOffset" field.</summary>
    public const int VirtualFixupsOffsetFieldNumber = 6;
    private uint virtualFixupsOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VirtualFixupsOffset {
      get { return virtualFixupsOffset_; }
      set {
        virtualFixupsOffset_ = value;
      }
    }

    /// <summary>Field number for the "ExportsOffset" field.</summary>
    public const int ExportsOffsetFieldNumber = 7;
    private uint exportsOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExportsOffset {
      get { return exportsOffset_; }
      set {
        exportsOffset_ = value;
      }
    }

    /// <summary>Field number for the "ImportsOffset" field.</summary>
    public const int ImportsOffsetFieldNumber = 8;
    private uint importsOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImportsOffset {
      get { return importsOffset_; }
      set {
        importsOffset_ = value;
      }
    }

    /// <summary>Field number for the "EndOffset" field.</summary>
    public const int EndOffsetFieldNumber = 9;
    private uint endOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndOffset {
      get { return endOffset_; }
      set {
        endOffset_ = value;
      }
    }

    /// <summary>Field number for the "LocalFixups" field.</summary>
    public const int LocalFixupsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::SOULS.HKX.LocalFixup> _repeated_localFixups_codec
        = pb::FieldCodec.ForMessage(82, global::SOULS.HKX.LocalFixup.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.LocalFixup> localFixups_ = new pbc::RepeatedField<global::SOULS.HKX.LocalFixup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.LocalFixup> LocalFixups {
      get { return localFixups_; }
    }

    /// <summary>Field number for the "GlobalFixups" field.</summary>
    public const int GlobalFixupsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::SOULS.HKX.GlobalFixup> _repeated_globalFixups_codec
        = pb::FieldCodec.ForMessage(90, global::SOULS.HKX.GlobalFixup.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.GlobalFixup> globalFixups_ = new pbc::RepeatedField<global::SOULS.HKX.GlobalFixup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.GlobalFixup> GlobalFixups {
      get { return globalFixups_; }
    }

    /// <summary>Field number for the "VirtualFixups" field.</summary>
    public const int VirtualFixupsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::SOULS.HKX.VirtualFixup> _repeated_virtualFixups_codec
        = pb::FieldCodec.ForMessage(98, global::SOULS.HKX.VirtualFixup.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.VirtualFixup> virtualFixups_ = new pbc::RepeatedField<global::SOULS.HKX.VirtualFixup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.VirtualFixup> VirtualFixups {
      get { return virtualFixups_; }
    }

    /// <summary>Field number for the "LocalReferences" field.</summary>
    public const int LocalReferencesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKXLocalReference> _repeated_localReferences_codec
        = pb::FieldCodec.ForMessage(106, global::SOULS.HKX.HKXLocalReference.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKXLocalReference> localReferences_ = new pbc::RepeatedField<global::SOULS.HKX.HKXLocalReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKXLocalReference> LocalReferences {
      get { return localReferences_; }
    }

    /// <summary>Field number for the "GlobalReferences" field.</summary>
    public const int GlobalReferencesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKXGlobalReference> _repeated_globalReferences_codec
        = pb::FieldCodec.ForMessage(114, global::SOULS.HKX.HKXGlobalReference.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKXGlobalReference> globalReferences_ = new pbc::RepeatedField<global::SOULS.HKX.HKXGlobalReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKXGlobalReference> GlobalReferences {
      get { return globalReferences_; }
    }

    /// <summary>Field number for the "VirtualReferences" field.</summary>
    public const int VirtualReferencesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKXVirtualReference> _repeated_virtualReferences_codec
        = pb::FieldCodec.ForMessage(122, global::SOULS.HKX.HKXVirtualReference.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKXVirtualReference> virtualReferences_ = new pbc::RepeatedField<global::SOULS.HKX.HKXVirtualReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKXVirtualReference> VirtualReferences {
      get { return virtualReferences_; }
    }

    /// <summary>Field number for the "Objects" field.</summary>
    public const int ObjectsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKXObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(130, global::SOULS.HKX.HKXObject.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKXObject> objects_ = new pbc::RepeatedField<global::SOULS.HKX.HKXObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKXObject> Objects {
      get { return objects_; }
    }

    /// <summary>Field number for the "SectionData" field.</summary>
    public const int SectionDataFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_sectionData_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> sectionData_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SectionData {
      get { return sectionData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXSection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXSection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SectionID != other.SectionID) return false;
      if (SectionTag != other.SectionTag) return false;
      if (AbsoluteDataStart != other.AbsoluteDataStart) return false;
      if (LocalFixupsOffset != other.LocalFixupsOffset) return false;
      if (GlobalFixupsOffset != other.GlobalFixupsOffset) return false;
      if (VirtualFixupsOffset != other.VirtualFixupsOffset) return false;
      if (ExportsOffset != other.ExportsOffset) return false;
      if (ImportsOffset != other.ImportsOffset) return false;
      if (EndOffset != other.EndOffset) return false;
      if(!localFixups_.Equals(other.localFixups_)) return false;
      if(!globalFixups_.Equals(other.globalFixups_)) return false;
      if(!virtualFixups_.Equals(other.virtualFixups_)) return false;
      if(!localReferences_.Equals(other.localReferences_)) return false;
      if(!globalReferences_.Equals(other.globalReferences_)) return false;
      if(!virtualReferences_.Equals(other.virtualReferences_)) return false;
      if(!objects_.Equals(other.objects_)) return false;
      if(!sectionData_.Equals(other.sectionData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SectionID != 0) hash ^= SectionID.GetHashCode();
      if (SectionTag.Length != 0) hash ^= SectionTag.GetHashCode();
      if (AbsoluteDataStart != 0) hash ^= AbsoluteDataStart.GetHashCode();
      if (LocalFixupsOffset != 0) hash ^= LocalFixupsOffset.GetHashCode();
      if (GlobalFixupsOffset != 0) hash ^= GlobalFixupsOffset.GetHashCode();
      if (VirtualFixupsOffset != 0) hash ^= VirtualFixupsOffset.GetHashCode();
      if (ExportsOffset != 0) hash ^= ExportsOffset.GetHashCode();
      if (ImportsOffset != 0) hash ^= ImportsOffset.GetHashCode();
      if (EndOffset != 0) hash ^= EndOffset.GetHashCode();
      hash ^= localFixups_.GetHashCode();
      hash ^= globalFixups_.GetHashCode();
      hash ^= virtualFixups_.GetHashCode();
      hash ^= localReferences_.GetHashCode();
      hash ^= globalReferences_.GetHashCode();
      hash ^= virtualReferences_.GetHashCode();
      hash ^= objects_.GetHashCode();
      hash ^= sectionData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SectionID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SectionID);
      }
      if (SectionTag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SectionTag);
      }
      if (AbsoluteDataStart != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AbsoluteDataStart);
      }
      if (LocalFixupsOffset != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LocalFixupsOffset);
      }
      if (GlobalFixupsOffset != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(GlobalFixupsOffset);
      }
      if (VirtualFixupsOffset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(VirtualFixupsOffset);
      }
      if (ExportsOffset != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ExportsOffset);
      }
      if (ImportsOffset != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ImportsOffset);
      }
      if (EndOffset != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(EndOffset);
      }
      localFixups_.WriteTo(output, _repeated_localFixups_codec);
      globalFixups_.WriteTo(output, _repeated_globalFixups_codec);
      virtualFixups_.WriteTo(output, _repeated_virtualFixups_codec);
      localReferences_.WriteTo(output, _repeated_localReferences_codec);
      globalReferences_.WriteTo(output, _repeated_globalReferences_codec);
      virtualReferences_.WriteTo(output, _repeated_virtualReferences_codec);
      objects_.WriteTo(output, _repeated_objects_codec);
      sectionData_.WriteTo(output, _repeated_sectionData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SectionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionID);
      }
      if (SectionTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionTag);
      }
      if (AbsoluteDataStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbsoluteDataStart);
      }
      if (LocalFixupsOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalFixupsOffset);
      }
      if (GlobalFixupsOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalFixupsOffset);
      }
      if (VirtualFixupsOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VirtualFixupsOffset);
      }
      if (ExportsOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExportsOffset);
      }
      if (ImportsOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImportsOffset);
      }
      if (EndOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndOffset);
      }
      size += localFixups_.CalculateSize(_repeated_localFixups_codec);
      size += globalFixups_.CalculateSize(_repeated_globalFixups_codec);
      size += virtualFixups_.CalculateSize(_repeated_virtualFixups_codec);
      size += localReferences_.CalculateSize(_repeated_localReferences_codec);
      size += globalReferences_.CalculateSize(_repeated_globalReferences_codec);
      size += virtualReferences_.CalculateSize(_repeated_virtualReferences_codec);
      size += objects_.CalculateSize(_repeated_objects_codec);
      size += sectionData_.CalculateSize(_repeated_sectionData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXSection other) {
      if (other == null) {
        return;
      }
      if (other.SectionID != 0) {
        SectionID = other.SectionID;
      }
      if (other.SectionTag.Length != 0) {
        SectionTag = other.SectionTag;
      }
      if (other.AbsoluteDataStart != 0) {
        AbsoluteDataStart = other.AbsoluteDataStart;
      }
      if (other.LocalFixupsOffset != 0) {
        LocalFixupsOffset = other.LocalFixupsOffset;
      }
      if (other.GlobalFixupsOffset != 0) {
        GlobalFixupsOffset = other.GlobalFixupsOffset;
      }
      if (other.VirtualFixupsOffset != 0) {
        VirtualFixupsOffset = other.VirtualFixupsOffset;
      }
      if (other.ExportsOffset != 0) {
        ExportsOffset = other.ExportsOffset;
      }
      if (other.ImportsOffset != 0) {
        ImportsOffset = other.ImportsOffset;
      }
      if (other.EndOffset != 0) {
        EndOffset = other.EndOffset;
      }
      localFixups_.Add(other.localFixups_);
      globalFixups_.Add(other.globalFixups_);
      virtualFixups_.Add(other.virtualFixups_);
      localReferences_.Add(other.localReferences_);
      globalReferences_.Add(other.globalReferences_);
      virtualReferences_.Add(other.virtualReferences_);
      objects_.Add(other.objects_);
      sectionData_.Add(other.sectionData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SectionID = input.ReadInt32();
            break;
          }
          case 18: {
            SectionTag = input.ReadString();
            break;
          }
          case 24: {
            AbsoluteDataStart = input.ReadUInt32();
            break;
          }
          case 32: {
            LocalFixupsOffset = input.ReadUInt32();
            break;
          }
          case 40: {
            GlobalFixupsOffset = input.ReadUInt32();
            break;
          }
          case 48: {
            VirtualFixupsOffset = input.ReadUInt32();
            break;
          }
          case 56: {
            ExportsOffset = input.ReadUInt32();
            break;
          }
          case 64: {
            ImportsOffset = input.ReadUInt32();
            break;
          }
          case 72: {
            EndOffset = input.ReadUInt32();
            break;
          }
          case 82: {
            localFixups_.AddEntriesFrom(input, _repeated_localFixups_codec);
            break;
          }
          case 90: {
            globalFixups_.AddEntriesFrom(input, _repeated_globalFixups_codec);
            break;
          }
          case 98: {
            virtualFixups_.AddEntriesFrom(input, _repeated_virtualFixups_codec);
            break;
          }
          case 106: {
            localReferences_.AddEntriesFrom(input, _repeated_localReferences_codec);
            break;
          }
          case 114: {
            globalReferences_.AddEntriesFrom(input, _repeated_globalReferences_codec);
            break;
          }
          case 122: {
            virtualReferences_.AddEntriesFrom(input, _repeated_virtualReferences_codec);
            break;
          }
          case 130: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
          case 138:
          case 136: {
            sectionData_.AddEntriesFrom(input, _repeated_sectionData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXClassName : pb::IMessage<HKXClassName> {
    private static readonly pb::MessageParser<HKXClassName> _parser = new pb::MessageParser<HKXClassName>(() => new HKXClassName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXClassName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXClassName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXClassName(HKXClassName other) : this() {
      signature_ = other.signature_;
      className_ = other.className_;
      sectionOffset_ = other.sectionOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXClassName Clone() {
      return new HKXClassName(this);
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private uint signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "ClassName" field.</summary>
    public const int ClassNameFieldNumber = 2;
    private string className_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 3;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXClassName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXClassName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (ClassName != other.ClassName) return false;
      if (SectionOffset != other.SectionOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature != 0) hash ^= Signature.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Signature);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassName);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SectionOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Signature);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXClassName other) {
      if (other == null) {
        return;
      }
      if (other.Signature != 0) {
        Signature = other.Signature;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Signature = input.ReadUInt32();
            break;
          }
          case 18: {
            ClassName = input.ReadString();
            break;
          }
          case 24: {
            SectionOffset = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXHeader : pb::IMessage<HKXHeader> {
    private static readonly pb::MessageParser<HKXHeader> _parser = new pb::MessageParser<HKXHeader>(() => new HKXHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXHeader(HKXHeader other) : this() {
      magic0_ = other.magic0_;
      magic1_ = other.magic1_;
      userTag_ = other.userTag_;
      version_ = other.version_;
      pointerSize_ = other.pointerSize_;
      endian_ = other.endian_;
      paddingOption_ = other.paddingOption_;
      baseClass_ = other.baseClass_;
      sectionCount_ = other.sectionCount_;
      contentsSectionIndex_ = other.contentsSectionIndex_;
      contentsSectionOffset_ = other.contentsSectionOffset_;
      contentsClassNameSectionIndex_ = other.contentsClassNameSectionIndex_;
      contentsClassNameSectionOffset_ = other.contentsClassNameSectionOffset_;
      contentsVersionString_ = other.contentsVersionString_;
      flags_ = other.flags_;
      unk3C_ = other.unk3C_;
      sectionOffset_ = other.sectionOffset_;
      unk40_ = other.unk40_;
      unk44_ = other.unk44_;
      unk48_ = other.unk48_;
      unk4C_ = other.unk4C_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXHeader Clone() {
      return new HKXHeader(this);
    }

    /// <summary>Field number for the "Magic0" field.</summary>
    public const int Magic0FieldNumber = 1;
    private uint magic0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Magic0 {
      get { return magic0_; }
      set {
        magic0_ = value;
      }
    }

    /// <summary>Field number for the "Magic1" field.</summary>
    public const int Magic1FieldNumber = 2;
    private uint magic1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Magic1 {
      get { return magic1_; }
      set {
        magic1_ = value;
      }
    }

    /// <summary>Field number for the "UserTag" field.</summary>
    public const int UserTagFieldNumber = 3;
    private int userTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserTag {
      get { return userTag_; }
      set {
        userTag_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "PointerSize" field.</summary>
    public const int PointerSizeFieldNumber = 5;
    private int pointerSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointerSize {
      get { return pointerSize_; }
      set {
        pointerSize_ = value;
      }
    }

    /// <summary>Field number for the "Endian" field.</summary>
    public const int EndianFieldNumber = 6;
    private int endian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Endian {
      get { return endian_; }
      set {
        endian_ = value;
      }
    }

    /// <summary>Field number for the "PaddingOption" field.</summary>
    public const int PaddingOptionFieldNumber = 7;
    private int paddingOption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaddingOption {
      get { return paddingOption_; }
      set {
        paddingOption_ = value;
      }
    }

    /// <summary>Field number for the "BaseClass" field.</summary>
    public const int BaseClassFieldNumber = 8;
    private int baseClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseClass {
      get { return baseClass_; }
      set {
        baseClass_ = value;
      }
    }

    /// <summary>Field number for the "SectionCount" field.</summary>
    public const int SectionCountFieldNumber = 9;
    private int sectionCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionCount {
      get { return sectionCount_; }
      set {
        sectionCount_ = value;
      }
    }

    /// <summary>Field number for the "ContentsSectionIndex" field.</summary>
    public const int ContentsSectionIndexFieldNumber = 10;
    private int contentsSectionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentsSectionIndex {
      get { return contentsSectionIndex_; }
      set {
        contentsSectionIndex_ = value;
      }
    }

    /// <summary>Field number for the "ContentsSectionOffset" field.</summary>
    public const int ContentsSectionOffsetFieldNumber = 11;
    private int contentsSectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentsSectionOffset {
      get { return contentsSectionOffset_; }
      set {
        contentsSectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "ContentsClassNameSectionIndex" field.</summary>
    public const int ContentsClassNameSectionIndexFieldNumber = 12;
    private int contentsClassNameSectionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentsClassNameSectionIndex {
      get { return contentsClassNameSectionIndex_; }
      set {
        contentsClassNameSectionIndex_ = value;
      }
    }

    /// <summary>Field number for the "ContentsClassNameSectionOffset" field.</summary>
    public const int ContentsClassNameSectionOffsetFieldNumber = 13;
    private int contentsClassNameSectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentsClassNameSectionOffset {
      get { return contentsClassNameSectionOffset_; }
      set {
        contentsClassNameSectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "ContentsVersionString" field.</summary>
    public const int ContentsVersionStringFieldNumber = 14;
    private string contentsVersionString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentsVersionString {
      get { return contentsVersionString_; }
      set {
        contentsVersionString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 15;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "Unk3C" field.</summary>
    public const int Unk3CFieldNumber = 16;
    private int unk3C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk3C {
      get { return unk3C_; }
      set {
        unk3C_ = value;
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 17;
    private int sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "Unk40" field.</summary>
    public const int Unk40FieldNumber = 18;
    private uint unk40_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unk40 {
      get { return unk40_; }
      set {
        unk40_ = value;
      }
    }

    /// <summary>Field number for the "Unk44" field.</summary>
    public const int Unk44FieldNumber = 19;
    private uint unk44_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unk44 {
      get { return unk44_; }
      set {
        unk44_ = value;
      }
    }

    /// <summary>Field number for the "Unk48" field.</summary>
    public const int Unk48FieldNumber = 20;
    private uint unk48_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unk48 {
      get { return unk48_; }
      set {
        unk48_ = value;
      }
    }

    /// <summary>Field number for the "Unk4C" field.</summary>
    public const int Unk4CFieldNumber = 21;
    private uint unk4C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unk4C {
      get { return unk4C_; }
      set {
        unk4C_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Magic0 != other.Magic0) return false;
      if (Magic1 != other.Magic1) return false;
      if (UserTag != other.UserTag) return false;
      if (Version != other.Version) return false;
      if (PointerSize != other.PointerSize) return false;
      if (Endian != other.Endian) return false;
      if (PaddingOption != other.PaddingOption) return false;
      if (BaseClass != other.BaseClass) return false;
      if (SectionCount != other.SectionCount) return false;
      if (ContentsSectionIndex != other.ContentsSectionIndex) return false;
      if (ContentsSectionOffset != other.ContentsSectionOffset) return false;
      if (ContentsClassNameSectionIndex != other.ContentsClassNameSectionIndex) return false;
      if (ContentsClassNameSectionOffset != other.ContentsClassNameSectionOffset) return false;
      if (ContentsVersionString != other.ContentsVersionString) return false;
      if (Flags != other.Flags) return false;
      if (Unk3C != other.Unk3C) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (Unk40 != other.Unk40) return false;
      if (Unk44 != other.Unk44) return false;
      if (Unk48 != other.Unk48) return false;
      if (Unk4C != other.Unk4C) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Magic0 != 0) hash ^= Magic0.GetHashCode();
      if (Magic1 != 0) hash ^= Magic1.GetHashCode();
      if (UserTag != 0) hash ^= UserTag.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (PointerSize != 0) hash ^= PointerSize.GetHashCode();
      if (Endian != 0) hash ^= Endian.GetHashCode();
      if (PaddingOption != 0) hash ^= PaddingOption.GetHashCode();
      if (BaseClass != 0) hash ^= BaseClass.GetHashCode();
      if (SectionCount != 0) hash ^= SectionCount.GetHashCode();
      if (ContentsSectionIndex != 0) hash ^= ContentsSectionIndex.GetHashCode();
      if (ContentsSectionOffset != 0) hash ^= ContentsSectionOffset.GetHashCode();
      if (ContentsClassNameSectionIndex != 0) hash ^= ContentsClassNameSectionIndex.GetHashCode();
      if (ContentsClassNameSectionOffset != 0) hash ^= ContentsClassNameSectionOffset.GetHashCode();
      if (ContentsVersionString.Length != 0) hash ^= ContentsVersionString.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Unk3C != 0) hash ^= Unk3C.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (Unk40 != 0) hash ^= Unk40.GetHashCode();
      if (Unk44 != 0) hash ^= Unk44.GetHashCode();
      if (Unk48 != 0) hash ^= Unk48.GetHashCode();
      if (Unk4C != 0) hash ^= Unk4C.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Magic0 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Magic0);
      }
      if (Magic1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Magic1);
      }
      if (UserTag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserTag);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Version);
      }
      if (PointerSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PointerSize);
      }
      if (Endian != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Endian);
      }
      if (PaddingOption != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PaddingOption);
      }
      if (BaseClass != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BaseClass);
      }
      if (SectionCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SectionCount);
      }
      if (ContentsSectionIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ContentsSectionIndex);
      }
      if (ContentsSectionOffset != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ContentsSectionOffset);
      }
      if (ContentsClassNameSectionIndex != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ContentsClassNameSectionIndex);
      }
      if (ContentsClassNameSectionOffset != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ContentsClassNameSectionOffset);
      }
      if (ContentsVersionString.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ContentsVersionString);
      }
      if (Flags != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Flags);
      }
      if (Unk3C != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Unk3C);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SectionOffset);
      }
      if (Unk40 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Unk40);
      }
      if (Unk44 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Unk44);
      }
      if (Unk48 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Unk48);
      }
      if (Unk4C != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Unk4C);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Magic0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Magic0);
      }
      if (Magic1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Magic1);
      }
      if (UserTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserTag);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (PointerSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointerSize);
      }
      if (Endian != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Endian);
      }
      if (PaddingOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaddingOption);
      }
      if (BaseClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseClass);
      }
      if (SectionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionCount);
      }
      if (ContentsSectionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentsSectionIndex);
      }
      if (ContentsSectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentsSectionOffset);
      }
      if (ContentsClassNameSectionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentsClassNameSectionIndex);
      }
      if (ContentsClassNameSectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentsClassNameSectionOffset);
      }
      if (ContentsVersionString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentsVersionString);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Unk3C != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Unk3C);
      }
      if (SectionOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SectionOffset);
      }
      if (Unk40 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unk40);
      }
      if (Unk44 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unk44);
      }
      if (Unk48 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unk48);
      }
      if (Unk4C != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unk4C);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXHeader other) {
      if (other == null) {
        return;
      }
      if (other.Magic0 != 0) {
        Magic0 = other.Magic0;
      }
      if (other.Magic1 != 0) {
        Magic1 = other.Magic1;
      }
      if (other.UserTag != 0) {
        UserTag = other.UserTag;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.PointerSize != 0) {
        PointerSize = other.PointerSize;
      }
      if (other.Endian != 0) {
        Endian = other.Endian;
      }
      if (other.PaddingOption != 0) {
        PaddingOption = other.PaddingOption;
      }
      if (other.BaseClass != 0) {
        BaseClass = other.BaseClass;
      }
      if (other.SectionCount != 0) {
        SectionCount = other.SectionCount;
      }
      if (other.ContentsSectionIndex != 0) {
        ContentsSectionIndex = other.ContentsSectionIndex;
      }
      if (other.ContentsSectionOffset != 0) {
        ContentsSectionOffset = other.ContentsSectionOffset;
      }
      if (other.ContentsClassNameSectionIndex != 0) {
        ContentsClassNameSectionIndex = other.ContentsClassNameSectionIndex;
      }
      if (other.ContentsClassNameSectionOffset != 0) {
        ContentsClassNameSectionOffset = other.ContentsClassNameSectionOffset;
      }
      if (other.ContentsVersionString.Length != 0) {
        ContentsVersionString = other.ContentsVersionString;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Unk3C != 0) {
        Unk3C = other.Unk3C;
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.Unk40 != 0) {
        Unk40 = other.Unk40;
      }
      if (other.Unk44 != 0) {
        Unk44 = other.Unk44;
      }
      if (other.Unk48 != 0) {
        Unk48 = other.Unk48;
      }
      if (other.Unk4C != 0) {
        Unk4C = other.Unk4C;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Magic0 = input.ReadUInt32();
            break;
          }
          case 16: {
            Magic1 = input.ReadUInt32();
            break;
          }
          case 24: {
            UserTag = input.ReadInt32();
            break;
          }
          case 32: {
            Version = input.ReadInt32();
            break;
          }
          case 40: {
            PointerSize = input.ReadInt32();
            break;
          }
          case 48: {
            Endian = input.ReadInt32();
            break;
          }
          case 56: {
            PaddingOption = input.ReadInt32();
            break;
          }
          case 64: {
            BaseClass = input.ReadInt32();
            break;
          }
          case 72: {
            SectionCount = input.ReadInt32();
            break;
          }
          case 80: {
            ContentsSectionIndex = input.ReadInt32();
            break;
          }
          case 88: {
            ContentsSectionOffset = input.ReadInt32();
            break;
          }
          case 96: {
            ContentsClassNameSectionIndex = input.ReadInt32();
            break;
          }
          case 104: {
            ContentsClassNameSectionOffset = input.ReadInt32();
            break;
          }
          case 114: {
            ContentsVersionString = input.ReadString();
            break;
          }
          case 120: {
            Flags = input.ReadInt32();
            break;
          }
          case 128: {
            Unk3C = input.ReadInt32();
            break;
          }
          case 136: {
            SectionOffset = input.ReadInt32();
            break;
          }
          case 144: {
            Unk40 = input.ReadUInt32();
            break;
          }
          case 152: {
            Unk44 = input.ReadUInt32();
            break;
          }
          case 160: {
            Unk48 = input.ReadUInt32();
            break;
          }
          case 168: {
            Unk4C = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__HKShort : pb::IMessage<HKArray__HKShort> {
    private static readonly pb::MessageParser<HKArray__HKShort> _parser = new pb::MessageParser<HKArray__HKShort>(() => new HKArray__HKShort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__HKShort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKShort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKShort(HKArray__HKShort other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKShort Clone() {
      return new HKArray__HKShort(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKShort> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.HKShort.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKShort> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.HKShort>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKShort> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.HKShort item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKShort Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__HKShort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__HKShort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__HKShort other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.HKShort();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.HKShort();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__Bone : pb::IMessage<HKArray__Bone> {
    private static readonly pb::MessageParser<HKArray__Bone> _parser = new pb::MessageParser<HKArray__Bone>(() => new HKArray__Bone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__Bone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__Bone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__Bone(HKArray__Bone other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__Bone Clone() {
      return new HKArray__Bone(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.Bone> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.Bone.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.Bone> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.Bone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.Bone> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.Bone item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.Bone Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__Bone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__Bone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__Bone other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.Bone();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.Bone();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__Transform : pb::IMessage<HKArray__Transform> {
    private static readonly pb::MessageParser<HKArray__Transform> _parser = new pb::MessageParser<HKArray__Transform>(() => new HKArray__Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__Transform(HKArray__Transform other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__Transform Clone() {
      return new HKArray__Transform(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.Transform> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.Transform.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.Transform> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.Transform> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.Transform item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.Transform Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__Transform other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.Transform();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.Transform();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__HKFloat : pb::IMessage<HKArray__HKFloat> {
    private static readonly pb::MessageParser<HKArray__HKFloat> _parser = new pb::MessageParser<HKArray__HKFloat>(() => new HKArray__HKFloat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__HKFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKFloat(HKArray__HKFloat other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKFloat Clone() {
      return new HKArray__HKFloat(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKFloat> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.HKFloat.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKFloat> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.HKFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKFloat> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.HKFloat item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKFloat Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__HKFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__HKFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__HKFloat other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.HKFloat();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.HKFloat();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__HKUInt : pb::IMessage<HKArray__HKUInt> {
    private static readonly pb::MessageParser<HKArray__HKUInt> _parser = new pb::MessageParser<HKArray__HKUInt>(() => new HKArray__HKUInt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__HKUInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKUInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKUInt(HKArray__HKUInt other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKUInt Clone() {
      return new HKArray__HKUInt(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKUInt> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.HKUInt.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKUInt> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.HKUInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKUInt> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.HKUInt item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKUInt Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__HKUInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__HKUInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__HKUInt other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.HKUInt();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.HKUInt();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__HKByte : pb::IMessage<HKArray__HKByte> {
    private static readonly pb::MessageParser<HKArray__HKByte> _parser = new pb::MessageParser<HKArray__HKByte>(() => new HKArray__HKByte());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__HKByte> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKByte() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKByte(HKArray__HKByte other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKByte Clone() {
      return new HKArray__HKByte(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKByte> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.HKByte.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKByte> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.HKByte>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKByte> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.HKByte item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKByte Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__HKByte);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__HKByte other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__HKByte other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.HKByte();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.HKByte();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKArray__HKVector4 : pb::IMessage<HKArray__HKVector4> {
    private static readonly pb::MessageParser<HKArray__HKVector4> _parser = new pb::MessageParser<HKArray__HKVector4>(() => new HKArray__HKVector4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKArray__HKVector4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKVector4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKVector4(HKArray__HKVector4 other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      flags_ = other.flags_;
      arrayData_ = other.arrayData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKArray__HKVector4 Clone() {
      return new HKArray__HKVector4(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ArrayData" field.</summary>
    public const int ArrayDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKVector4> _repeated_arrayData_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.HKX.HKVector4.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKVector4> arrayData_ = new pbc::RepeatedField<global::SOULS.HKX.HKVector4>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKVector4> ArrayData {
      get { return arrayData_; }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::SOULS.HKX.HKVector4 item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKVector4 Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKArray__HKVector4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKArray__HKVector4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Flags != other.Flags) return false;
      if(!arrayData_.Equals(other.arrayData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= arrayData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Capacity);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      arrayData_.WriteTo(output, _repeated_arrayData_codec);
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += arrayData_.CalculateSize(_repeated_arrayData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKArray__HKVector4 other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      arrayData_.Add(other.arrayData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.HKX.HKVector4();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            arrayData_.AddEntriesFrom(input, _repeated_arrayData_codec);
            break;
          }
          case 42: {
            if (item_ == null) {
              Item = new global::SOULS.HKX.HKVector4();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKASkeleton : pb::IMessage<HKASkeleton> {
    private static readonly pb::MessageParser<HKASkeleton> _parser = new pb::MessageParser<HKASkeleton>(() => new HKASkeleton());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKASkeleton> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKASkeleton() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKASkeleton(HKASkeleton other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      parentIndices_ = other.parentIndices_ != null ? other.parentIndices_.Clone() : null;
      bones_ = other.bones_ != null ? other.bones_.Clone() : null;
      transforms_ = other.transforms_ != null ? other.transforms_.Clone() : null;
      referenceFloats_ = other.referenceFloats_ != null ? other.referenceFloats_.Clone() : null;
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKASkeleton Clone() {
      return new HKASkeleton(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::SOULS.HKX.HKCString name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKCString Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "ParentIndices" field.</summary>
    public const int ParentIndicesFieldNumber = 2;
    private global::SOULS.HKX.HKArray__HKShort parentIndices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKShort ParentIndices {
      get { return parentIndices_; }
      set {
        parentIndices_ = value;
      }
    }

    /// <summary>Field number for the "Bones" field.</summary>
    public const int BonesFieldNumber = 3;
    private global::SOULS.HKX.HKArray__Bone bones_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__Bone Bones {
      get { return bones_; }
      set {
        bones_ = value;
      }
    }

    /// <summary>Field number for the "Transforms" field.</summary>
    public const int TransformsFieldNumber = 4;
    private global::SOULS.HKX.HKArray__Transform transforms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__Transform Transforms {
      get { return transforms_; }
      set {
        transforms_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceFloats" field.</summary>
    public const int ReferenceFloatsFieldNumber = 5;
    private global::SOULS.HKX.HKArray__HKFloat referenceFloats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKFloat ReferenceFloats {
      get { return referenceFloats_; }
      set {
        referenceFloats_ = value;
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 6;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 7;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKASkeleton);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKASkeleton other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(ParentIndices, other.ParentIndices)) return false;
      if (!object.Equals(Bones, other.Bones)) return false;
      if (!object.Equals(Transforms, other.Transforms)) return false;
      if (!object.Equals(ReferenceFloats, other.ReferenceFloats)) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (parentIndices_ != null) hash ^= ParentIndices.GetHashCode();
      if (bones_ != null) hash ^= Bones.GetHashCode();
      if (transforms_ != null) hash ^= Transforms.GetHashCode();
      if (referenceFloats_ != null) hash ^= ReferenceFloats.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (parentIndices_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParentIndices);
      }
      if (bones_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bones);
      }
      if (transforms_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Transforms);
      }
      if (referenceFloats_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ReferenceFloats);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (parentIndices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentIndices);
      }
      if (bones_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bones);
      }
      if (transforms_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transforms);
      }
      if (referenceFloats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceFloats);
      }
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKASkeleton other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::SOULS.HKX.HKCString();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.parentIndices_ != null) {
        if (parentIndices_ == null) {
          ParentIndices = new global::SOULS.HKX.HKArray__HKShort();
        }
        ParentIndices.MergeFrom(other.ParentIndices);
      }
      if (other.bones_ != null) {
        if (bones_ == null) {
          Bones = new global::SOULS.HKX.HKArray__Bone();
        }
        Bones.MergeFrom(other.Bones);
      }
      if (other.transforms_ != null) {
        if (transforms_ == null) {
          Transforms = new global::SOULS.HKX.HKArray__Transform();
        }
        Transforms.MergeFrom(other.Transforms);
      }
      if (other.referenceFloats_ != null) {
        if (referenceFloats_ == null) {
          ReferenceFloats = new global::SOULS.HKX.HKArray__HKFloat();
        }
        ReferenceFloats.MergeFrom(other.ReferenceFloats);
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::SOULS.HKX.HKCString();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            if (parentIndices_ == null) {
              ParentIndices = new global::SOULS.HKX.HKArray__HKShort();
            }
            input.ReadMessage(ParentIndices);
            break;
          }
          case 26: {
            if (bones_ == null) {
              Bones = new global::SOULS.HKX.HKArray__Bone();
            }
            input.ReadMessage(Bones);
            break;
          }
          case 34: {
            if (transforms_ == null) {
              Transforms = new global::SOULS.HKX.HKArray__Transform();
            }
            input.ReadMessage(Transforms);
            break;
          }
          case 42: {
            if (referenceFloats_ == null) {
              ReferenceFloats = new global::SOULS.HKX.HKArray__HKFloat();
            }
            input.ReadMessage(ReferenceFloats);
            break;
          }
          case 48: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 56: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKASplineCompressedAnimation : pb::IMessage<HKASplineCompressedAnimation> {
    private static readonly pb::MessageParser<HKASplineCompressedAnimation> _parser = new pb::MessageParser<HKASplineCompressedAnimation>(() => new HKASplineCompressedAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKASplineCompressedAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKASplineCompressedAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKASplineCompressedAnimation(HKASplineCompressedAnimation other) : this() {
      animationType_ = other.animationType_ != null ? other.animationType_.Clone() : null;
      duration_ = other.duration_;
      transformTrackCount_ = other.transformTrackCount_;
      floatTrackCount_ = other.floatTrackCount_;
      frameCount_ = other.frameCount_;
      blockCount_ = other.blockCount_;
      framesPerBlock_ = other.framesPerBlock_;
      maskAndQuantization_ = other.maskAndQuantization_;
      blockDuration_ = other.blockDuration_;
      inverseBlockDuration_ = other.inverseBlockDuration_;
      frameDuration_ = other.frameDuration_;
      blockOffsets_ = other.blockOffsets_ != null ? other.blockOffsets_.Clone() : null;
      floatBlockOffsets_ = other.floatBlockOffsets_ != null ? other.floatBlockOffsets_.Clone() : null;
      transformBlockOffsets_ = other.transformBlockOffsets_ != null ? other.transformBlockOffsets_.Clone() : null;
      floatOffsets_ = other.floatOffsets_ != null ? other.floatOffsets_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      endian_ = other.endian_;
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKASplineCompressedAnimation Clone() {
      return new HKASplineCompressedAnimation(this);
    }

    /// <summary>Field number for the "AnimationType" field.</summary>
    public const int AnimationTypeFieldNumber = 1;
    private global::SOULS.HKX.AnimationType animationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.AnimationType AnimationType {
      get { return animationType_; }
      set {
        animationType_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "TransformTrackCount" field.</summary>
    public const int TransformTrackCountFieldNumber = 3;
    private int transformTrackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformTrackCount {
      get { return transformTrackCount_; }
      set {
        transformTrackCount_ = value;
      }
    }

    /// <summary>Field number for the "FloatTrackCount" field.</summary>
    public const int FloatTrackCountFieldNumber = 4;
    private int floatTrackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FloatTrackCount {
      get { return floatTrackCount_; }
      set {
        floatTrackCount_ = value;
      }
    }

    /// <summary>Field number for the "FrameCount" field.</summary>
    public const int FrameCountFieldNumber = 5;
    private int frameCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameCount {
      get { return frameCount_; }
      set {
        frameCount_ = value;
      }
    }

    /// <summary>Field number for the "BlockCount" field.</summary>
    public const int BlockCountFieldNumber = 6;
    private int blockCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockCount {
      get { return blockCount_; }
      set {
        blockCount_ = value;
      }
    }

    /// <summary>Field number for the "FramesPerBlock" field.</summary>
    public const int FramesPerBlockFieldNumber = 7;
    private int framesPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesPerBlock {
      get { return framesPerBlock_; }
      set {
        framesPerBlock_ = value;
      }
    }

    /// <summary>Field number for the "MaskAndQuantization" field.</summary>
    public const int MaskAndQuantizationFieldNumber = 8;
    private uint maskAndQuantization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaskAndQuantization {
      get { return maskAndQuantization_; }
      set {
        maskAndQuantization_ = value;
      }
    }

    /// <summary>Field number for the "BlockDuration" field.</summary>
    public const int BlockDurationFieldNumber = 9;
    private float blockDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlockDuration {
      get { return blockDuration_; }
      set {
        blockDuration_ = value;
      }
    }

    /// <summary>Field number for the "InverseBlockDuration" field.</summary>
    public const int InverseBlockDurationFieldNumber = 10;
    private float inverseBlockDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InverseBlockDuration {
      get { return inverseBlockDuration_; }
      set {
        inverseBlockDuration_ = value;
      }
    }

    /// <summary>Field number for the "FrameDuration" field.</summary>
    public const int FrameDurationFieldNumber = 11;
    private float frameDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrameDuration {
      get { return frameDuration_; }
      set {
        frameDuration_ = value;
      }
    }

    /// <summary>Field number for the "BlockOffsets" field.</summary>
    public const int BlockOffsetsFieldNumber = 12;
    private global::SOULS.HKX.HKArray__HKUInt blockOffsets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKUInt BlockOffsets {
      get { return blockOffsets_; }
      set {
        blockOffsets_ = value;
      }
    }

    /// <summary>Field number for the "FloatBlockOffsets" field.</summary>
    public const int FloatBlockOffsetsFieldNumber = 13;
    private global::SOULS.HKX.HKArray__HKUInt floatBlockOffsets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKUInt FloatBlockOffsets {
      get { return floatBlockOffsets_; }
      set {
        floatBlockOffsets_ = value;
      }
    }

    /// <summary>Field number for the "TransformBlockOffsets" field.</summary>
    public const int TransformBlockOffsetsFieldNumber = 14;
    private global::SOULS.HKX.HKArray__HKUInt transformBlockOffsets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKUInt TransformBlockOffsets {
      get { return transformBlockOffsets_; }
      set {
        transformBlockOffsets_ = value;
      }
    }

    /// <summary>Field number for the "FloatOffsets" field.</summary>
    public const int FloatOffsetsFieldNumber = 15;
    private global::SOULS.HKX.HKArray__HKUInt floatOffsets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKUInt FloatOffsets {
      get { return floatOffsets_; }
      set {
        floatOffsets_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 16;
    private global::SOULS.HKX.HKArray__HKByte data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKByte Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "Endian" field.</summary>
    public const int EndianFieldNumber = 17;
    private int endian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Endian {
      get { return endian_; }
      set {
        endian_ = value;
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 18;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 19;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKASplineCompressedAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKASplineCompressedAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AnimationType, other.AnimationType)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (TransformTrackCount != other.TransformTrackCount) return false;
      if (FloatTrackCount != other.FloatTrackCount) return false;
      if (FrameCount != other.FrameCount) return false;
      if (BlockCount != other.BlockCount) return false;
      if (FramesPerBlock != other.FramesPerBlock) return false;
      if (MaskAndQuantization != other.MaskAndQuantization) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BlockDuration, other.BlockDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InverseBlockDuration, other.InverseBlockDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameDuration, other.FrameDuration)) return false;
      if (!object.Equals(BlockOffsets, other.BlockOffsets)) return false;
      if (!object.Equals(FloatBlockOffsets, other.FloatBlockOffsets)) return false;
      if (!object.Equals(TransformBlockOffsets, other.TransformBlockOffsets)) return false;
      if (!object.Equals(FloatOffsets, other.FloatOffsets)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Endian != other.Endian) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (animationType_ != null) hash ^= AnimationType.GetHashCode();
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (TransformTrackCount != 0) hash ^= TransformTrackCount.GetHashCode();
      if (FloatTrackCount != 0) hash ^= FloatTrackCount.GetHashCode();
      if (FrameCount != 0) hash ^= FrameCount.GetHashCode();
      if (BlockCount != 0) hash ^= BlockCount.GetHashCode();
      if (FramesPerBlock != 0) hash ^= FramesPerBlock.GetHashCode();
      if (MaskAndQuantization != 0) hash ^= MaskAndQuantization.GetHashCode();
      if (BlockDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BlockDuration);
      if (InverseBlockDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InverseBlockDuration);
      if (FrameDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameDuration);
      if (blockOffsets_ != null) hash ^= BlockOffsets.GetHashCode();
      if (floatBlockOffsets_ != null) hash ^= FloatBlockOffsets.GetHashCode();
      if (transformBlockOffsets_ != null) hash ^= TransformBlockOffsets.GetHashCode();
      if (floatOffsets_ != null) hash ^= FloatOffsets.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Endian != 0) hash ^= Endian.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (animationType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AnimationType);
      }
      if (Duration != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Duration);
      }
      if (TransformTrackCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TransformTrackCount);
      }
      if (FloatTrackCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FloatTrackCount);
      }
      if (FrameCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FrameCount);
      }
      if (BlockCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockCount);
      }
      if (FramesPerBlock != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FramesPerBlock);
      }
      if (MaskAndQuantization != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MaskAndQuantization);
      }
      if (BlockDuration != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BlockDuration);
      }
      if (InverseBlockDuration != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(InverseBlockDuration);
      }
      if (FrameDuration != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(FrameDuration);
      }
      if (blockOffsets_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BlockOffsets);
      }
      if (floatBlockOffsets_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(FloatBlockOffsets);
      }
      if (transformBlockOffsets_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TransformBlockOffsets);
      }
      if (floatOffsets_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FloatOffsets);
      }
      if (data_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Data);
      }
      if (Endian != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Endian);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (animationType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimationType);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (TransformTrackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransformTrackCount);
      }
      if (FloatTrackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloatTrackCount);
      }
      if (FrameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameCount);
      }
      if (BlockCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockCount);
      }
      if (FramesPerBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesPerBlock);
      }
      if (MaskAndQuantization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaskAndQuantization);
      }
      if (BlockDuration != 0F) {
        size += 1 + 4;
      }
      if (InverseBlockDuration != 0F) {
        size += 1 + 4;
      }
      if (FrameDuration != 0F) {
        size += 1 + 4;
      }
      if (blockOffsets_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockOffsets);
      }
      if (floatBlockOffsets_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatBlockOffsets);
      }
      if (transformBlockOffsets_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransformBlockOffsets);
      }
      if (floatOffsets_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatOffsets);
      }
      if (data_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Endian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Endian);
      }
      if (SectionOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKASplineCompressedAnimation other) {
      if (other == null) {
        return;
      }
      if (other.animationType_ != null) {
        if (animationType_ == null) {
          AnimationType = new global::SOULS.HKX.AnimationType();
        }
        AnimationType.MergeFrom(other.AnimationType);
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.TransformTrackCount != 0) {
        TransformTrackCount = other.TransformTrackCount;
      }
      if (other.FloatTrackCount != 0) {
        FloatTrackCount = other.FloatTrackCount;
      }
      if (other.FrameCount != 0) {
        FrameCount = other.FrameCount;
      }
      if (other.BlockCount != 0) {
        BlockCount = other.BlockCount;
      }
      if (other.FramesPerBlock != 0) {
        FramesPerBlock = other.FramesPerBlock;
      }
      if (other.MaskAndQuantization != 0) {
        MaskAndQuantization = other.MaskAndQuantization;
      }
      if (other.BlockDuration != 0F) {
        BlockDuration = other.BlockDuration;
      }
      if (other.InverseBlockDuration != 0F) {
        InverseBlockDuration = other.InverseBlockDuration;
      }
      if (other.FrameDuration != 0F) {
        FrameDuration = other.FrameDuration;
      }
      if (other.blockOffsets_ != null) {
        if (blockOffsets_ == null) {
          BlockOffsets = new global::SOULS.HKX.HKArray__HKUInt();
        }
        BlockOffsets.MergeFrom(other.BlockOffsets);
      }
      if (other.floatBlockOffsets_ != null) {
        if (floatBlockOffsets_ == null) {
          FloatBlockOffsets = new global::SOULS.HKX.HKArray__HKUInt();
        }
        FloatBlockOffsets.MergeFrom(other.FloatBlockOffsets);
      }
      if (other.transformBlockOffsets_ != null) {
        if (transformBlockOffsets_ == null) {
          TransformBlockOffsets = new global::SOULS.HKX.HKArray__HKUInt();
        }
        TransformBlockOffsets.MergeFrom(other.TransformBlockOffsets);
      }
      if (other.floatOffsets_ != null) {
        if (floatOffsets_ == null) {
          FloatOffsets = new global::SOULS.HKX.HKArray__HKUInt();
        }
        FloatOffsets.MergeFrom(other.FloatOffsets);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::SOULS.HKX.HKArray__HKByte();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Endian != 0) {
        Endian = other.Endian;
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (animationType_ == null) {
              AnimationType = new global::SOULS.HKX.AnimationType();
            }
            input.ReadMessage(AnimationType);
            break;
          }
          case 21: {
            Duration = input.ReadFloat();
            break;
          }
          case 24: {
            TransformTrackCount = input.ReadInt32();
            break;
          }
          case 32: {
            FloatTrackCount = input.ReadInt32();
            break;
          }
          case 40: {
            FrameCount = input.ReadInt32();
            break;
          }
          case 48: {
            BlockCount = input.ReadInt32();
            break;
          }
          case 56: {
            FramesPerBlock = input.ReadInt32();
            break;
          }
          case 64: {
            MaskAndQuantization = input.ReadUInt32();
            break;
          }
          case 77: {
            BlockDuration = input.ReadFloat();
            break;
          }
          case 85: {
            InverseBlockDuration = input.ReadFloat();
            break;
          }
          case 93: {
            FrameDuration = input.ReadFloat();
            break;
          }
          case 98: {
            if (blockOffsets_ == null) {
              BlockOffsets = new global::SOULS.HKX.HKArray__HKUInt();
            }
            input.ReadMessage(BlockOffsets);
            break;
          }
          case 106: {
            if (floatBlockOffsets_ == null) {
              FloatBlockOffsets = new global::SOULS.HKX.HKArray__HKUInt();
            }
            input.ReadMessage(FloatBlockOffsets);
            break;
          }
          case 114: {
            if (transformBlockOffsets_ == null) {
              TransformBlockOffsets = new global::SOULS.HKX.HKArray__HKUInt();
            }
            input.ReadMessage(TransformBlockOffsets);
            break;
          }
          case 122: {
            if (floatOffsets_ == null) {
              FloatOffsets = new global::SOULS.HKX.HKArray__HKUInt();
            }
            input.ReadMessage(FloatOffsets);
            break;
          }
          case 130: {
            if (data_ == null) {
              Data = new global::SOULS.HKX.HKArray__HKByte();
            }
            input.ReadMessage(Data);
            break;
          }
          case 136: {
            Endian = input.ReadInt32();
            break;
          }
          case 144: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 152: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKAAnimationBinding : pb::IMessage<HKAAnimationBinding> {
    private static readonly pb::MessageParser<HKAAnimationBinding> _parser = new pb::MessageParser<HKAAnimationBinding>(() => new HKAAnimationBinding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKAAnimationBinding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKAAnimationBinding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKAAnimationBinding(HKAAnimationBinding other) : this() {
      transformTrackToBoneIndices_ = other.transformTrackToBoneIndices_ != null ? other.transformTrackToBoneIndices_.Clone() : null;
      floatTrackToFloatSlotIndices_ = other.floatTrackToFloatSlotIndices_ != null ? other.floatTrackToFloatSlotIndices_.Clone() : null;
      partitionIndices_ = other.partitionIndices_ != null ? other.partitionIndices_.Clone() : null;
      blendHint_ = other.blendHint_ != null ? other.blendHint_.Clone() : null;
      originalSkeletonName_ = other.originalSkeletonName_;
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKAAnimationBinding Clone() {
      return new HKAAnimationBinding(this);
    }

    /// <summary>Field number for the "TransformTrackToBoneIndices" field.</summary>
    public const int TransformTrackToBoneIndicesFieldNumber = 1;
    private global::SOULS.HKX.HKArray__HKShort transformTrackToBoneIndices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKShort TransformTrackToBoneIndices {
      get { return transformTrackToBoneIndices_; }
      set {
        transformTrackToBoneIndices_ = value;
      }
    }

    /// <summary>Field number for the "FloatTrackToFloatSlotIndices" field.</summary>
    public const int FloatTrackToFloatSlotIndicesFieldNumber = 2;
    private global::SOULS.HKX.HKArray__HKShort floatTrackToFloatSlotIndices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKShort FloatTrackToFloatSlotIndices {
      get { return floatTrackToFloatSlotIndices_; }
      set {
        floatTrackToFloatSlotIndices_ = value;
      }
    }

    /// <summary>Field number for the "PartitionIndices" field.</summary>
    public const int PartitionIndicesFieldNumber = 3;
    private global::SOULS.HKX.HKArray__HKShort partitionIndices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKShort PartitionIndices {
      get { return partitionIndices_; }
      set {
        partitionIndices_ = value;
      }
    }

    /// <summary>Field number for the "BlendHint" field.</summary>
    public const int BlendHintFieldNumber = 4;
    private global::SOULS.HKX.AnimationBlendHint blendHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.AnimationBlendHint BlendHint {
      get { return blendHint_; }
      set {
        blendHint_ = value;
      }
    }

    /// <summary>Field number for the "OriginalSkeletonName" field.</summary>
    public const int OriginalSkeletonNameFieldNumber = 5;
    private string originalSkeletonName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalSkeletonName {
      get { return originalSkeletonName_; }
      set {
        originalSkeletonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 6;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 7;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKAAnimationBinding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKAAnimationBinding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransformTrackToBoneIndices, other.TransformTrackToBoneIndices)) return false;
      if (!object.Equals(FloatTrackToFloatSlotIndices, other.FloatTrackToFloatSlotIndices)) return false;
      if (!object.Equals(PartitionIndices, other.PartitionIndices)) return false;
      if (!object.Equals(BlendHint, other.BlendHint)) return false;
      if (OriginalSkeletonName != other.OriginalSkeletonName) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transformTrackToBoneIndices_ != null) hash ^= TransformTrackToBoneIndices.GetHashCode();
      if (floatTrackToFloatSlotIndices_ != null) hash ^= FloatTrackToFloatSlotIndices.GetHashCode();
      if (partitionIndices_ != null) hash ^= PartitionIndices.GetHashCode();
      if (blendHint_ != null) hash ^= BlendHint.GetHashCode();
      if (OriginalSkeletonName.Length != 0) hash ^= OriginalSkeletonName.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transformTrackToBoneIndices_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransformTrackToBoneIndices);
      }
      if (floatTrackToFloatSlotIndices_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FloatTrackToFloatSlotIndices);
      }
      if (partitionIndices_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PartitionIndices);
      }
      if (blendHint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BlendHint);
      }
      if (OriginalSkeletonName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OriginalSkeletonName);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transformTrackToBoneIndices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransformTrackToBoneIndices);
      }
      if (floatTrackToFloatSlotIndices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatTrackToFloatSlotIndices);
      }
      if (partitionIndices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartitionIndices);
      }
      if (blendHint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlendHint);
      }
      if (OriginalSkeletonName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalSkeletonName);
      }
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKAAnimationBinding other) {
      if (other == null) {
        return;
      }
      if (other.transformTrackToBoneIndices_ != null) {
        if (transformTrackToBoneIndices_ == null) {
          TransformTrackToBoneIndices = new global::SOULS.HKX.HKArray__HKShort();
        }
        TransformTrackToBoneIndices.MergeFrom(other.TransformTrackToBoneIndices);
      }
      if (other.floatTrackToFloatSlotIndices_ != null) {
        if (floatTrackToFloatSlotIndices_ == null) {
          FloatTrackToFloatSlotIndices = new global::SOULS.HKX.HKArray__HKShort();
        }
        FloatTrackToFloatSlotIndices.MergeFrom(other.FloatTrackToFloatSlotIndices);
      }
      if (other.partitionIndices_ != null) {
        if (partitionIndices_ == null) {
          PartitionIndices = new global::SOULS.HKX.HKArray__HKShort();
        }
        PartitionIndices.MergeFrom(other.PartitionIndices);
      }
      if (other.blendHint_ != null) {
        if (blendHint_ == null) {
          BlendHint = new global::SOULS.HKX.AnimationBlendHint();
        }
        BlendHint.MergeFrom(other.BlendHint);
      }
      if (other.OriginalSkeletonName.Length != 0) {
        OriginalSkeletonName = other.OriginalSkeletonName;
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transformTrackToBoneIndices_ == null) {
              TransformTrackToBoneIndices = new global::SOULS.HKX.HKArray__HKShort();
            }
            input.ReadMessage(TransformTrackToBoneIndices);
            break;
          }
          case 18: {
            if (floatTrackToFloatSlotIndices_ == null) {
              FloatTrackToFloatSlotIndices = new global::SOULS.HKX.HKArray__HKShort();
            }
            input.ReadMessage(FloatTrackToFloatSlotIndices);
            break;
          }
          case 26: {
            if (partitionIndices_ == null) {
              PartitionIndices = new global::SOULS.HKX.HKArray__HKShort();
            }
            input.ReadMessage(PartitionIndices);
            break;
          }
          case 34: {
            if (blendHint_ == null) {
              BlendHint = new global::SOULS.HKX.AnimationBlendHint();
            }
            input.ReadMessage(BlendHint);
            break;
          }
          case 42: {
            OriginalSkeletonName = input.ReadString();
            break;
          }
          case 48: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 56: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKADefaultAnimatedReferenceFrame : pb::IMessage<HKADefaultAnimatedReferenceFrame> {
    private static readonly pb::MessageParser<HKADefaultAnimatedReferenceFrame> _parser = new pb::MessageParser<HKADefaultAnimatedReferenceFrame>(() => new HKADefaultAnimatedReferenceFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKADefaultAnimatedReferenceFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKADefaultAnimatedReferenceFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKADefaultAnimatedReferenceFrame(HKADefaultAnimatedReferenceFrame other) : this() {
      up_ = other.up_ != null ? other.up_.Clone() : null;
      forward_ = other.forward_ != null ? other.forward_.Clone() : null;
      duration_ = other.duration_;
      referenceFrameSamples_ = other.referenceFrameSamples_ != null ? other.referenceFrameSamples_.Clone() : null;
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKADefaultAnimatedReferenceFrame Clone() {
      return new HKADefaultAnimatedReferenceFrame(this);
    }

    /// <summary>Field number for the "Up" field.</summary>
    public const int UpFieldNumber = 1;
    private global::SOULS.Vector4.Vector4 up_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector4.Vector4 Up {
      get { return up_; }
      set {
        up_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 2;
    private global::SOULS.Vector4.Vector4 forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector4.Vector4 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceFrameSamples" field.</summary>
    public const int ReferenceFrameSamplesFieldNumber = 4;
    private global::SOULS.HKX.HKArray__HKVector4 referenceFrameSamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.HKX.HKArray__HKVector4 ReferenceFrameSamples {
      get { return referenceFrameSamples_; }
      set {
        referenceFrameSamples_ = value;
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 5;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 6;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKADefaultAnimatedReferenceFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKADefaultAnimatedReferenceFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Up, other.Up)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (!object.Equals(ReferenceFrameSamples, other.ReferenceFrameSamples)) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (up_ != null) hash ^= Up.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (referenceFrameSamples_ != null) hash ^= ReferenceFrameSamples.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (up_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Up);
      }
      if (forward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Forward);
      }
      if (Duration != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (referenceFrameSamples_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReferenceFrameSamples);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (up_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Up);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (referenceFrameSamples_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceFrameSamples);
      }
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKADefaultAnimatedReferenceFrame other) {
      if (other == null) {
        return;
      }
      if (other.up_ != null) {
        if (up_ == null) {
          Up = new global::SOULS.Vector4.Vector4();
        }
        Up.MergeFrom(other.Up);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          Forward = new global::SOULS.Vector4.Vector4();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.referenceFrameSamples_ != null) {
        if (referenceFrameSamples_ == null) {
          ReferenceFrameSamples = new global::SOULS.HKX.HKArray__HKVector4();
        }
        ReferenceFrameSamples.MergeFrom(other.ReferenceFrameSamples);
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (up_ == null) {
              Up = new global::SOULS.Vector4.Vector4();
            }
            input.ReadMessage(Up);
            break;
          }
          case 18: {
            if (forward_ == null) {
              Forward = new global::SOULS.Vector4.Vector4();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 34: {
            if (referenceFrameSamples_ == null) {
              ReferenceFrameSamples = new global::SOULS.HKX.HKArray__HKVector4();
            }
            input.ReadMessage(ReferenceFrameSamples);
            break;
          }
          case 40: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 48: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IHKXSerializable : pb::IMessage<IHKXSerializable> {
    private static readonly pb::MessageParser<IHKXSerializable> _parser = new pb::MessageParser<IHKXSerializable>(() => new IHKXSerializable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IHKXSerializable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IHKXSerializable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IHKXSerializable(IHKXSerializable other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IHKXSerializable Clone() {
      return new IHKXSerializable(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IHKXSerializable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IHKXSerializable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IHKXSerializable other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HKCStringData : pb::IMessage<HKCStringData> {
    private static readonly pb::MessageParser<HKCStringData> _parser = new pb::MessageParser<HKCStringData>(() => new HKCStringData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKCStringData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKCStringData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKCStringData(HKCStringData other) : this() {
      data_ = other.data_;
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKCStringData Clone() {
      return new HKCStringData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 2;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 3;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKCStringData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKCStringData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (SectionOffset != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKCStringData other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
          case 16: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 24: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKUShort : pb::IMessage<HKUShort> {
    private static readonly pb::MessageParser<HKUShort> _parser = new pb::MessageParser<HKUShort>(() => new HKUShort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKUShort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKUShort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKUShort(HKUShort other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKUShort Clone() {
      return new HKUShort(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private uint data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKUShort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKUShort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKUShort other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Data = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXGenericObject : pb::IMessage<HKXGenericObject> {
    private static readonly pb::MessageParser<HKXGenericObject> _parser = new pb::MessageParser<HKXGenericObject>(() => new HKXGenericObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXGenericObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXGenericObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXGenericObject(HKXGenericObject other) : this() {
      bytes_ = other.bytes_.Clone();
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXGenericObject Clone() {
      return new HKXGenericObject(this);
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_bytes_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> bytes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bytes {
      get { return bytes_; }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 2;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 3;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXGenericObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXGenericObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bytes_.Equals(other.bytes_)) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bytes_.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bytes_.WriteTo(output, _repeated_bytes_codec);
      if (SectionOffset != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bytes_.CalculateSize(_repeated_bytes_codec);
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXGenericObject other) {
      if (other == null) {
        return;
      }
      bytes_.Add(other.bytes_);
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            bytes_.AddEntriesFrom(input, _repeated_bytes_codec);
            break;
          }
          case 16: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 24: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HKXClassNames : pb::IMessage<HKXClassNames> {
    private static readonly pb::MessageParser<HKXClassNames> _parser = new pb::MessageParser<HKXClassNames>(() => new HKXClassNames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HKXClassNames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.HKX.HKXReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXClassNames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXClassNames(HKXClassNames other) : this() {
      classNames_ = other.classNames_.Clone();
      offsetClassNamesMap_ = other.offsetClassNamesMap_.Clone();
      sectionOffset_ = other.sectionOffset_;
      dataSize_ = other.dataSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HKXClassNames Clone() {
      return new HKXClassNames(this);
    }

    /// <summary>Field number for the "ClassNames" field.</summary>
    public const int ClassNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SOULS.HKX.HKXClassName> _repeated_classNames_codec
        = pb::FieldCodec.ForMessage(10, global::SOULS.HKX.HKXClassName.Parser);
    private readonly pbc::RepeatedField<global::SOULS.HKX.HKXClassName> classNames_ = new pbc::RepeatedField<global::SOULS.HKX.HKXClassName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.HKX.HKXClassName> ClassNames {
      get { return classNames_; }
    }

    /// <summary>Field number for the "OffsetClassNamesMap" field.</summary>
    public const int OffsetClassNamesMapFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::SOULS.HKX.HKXClassName>.Codec _map_offsetClassNamesMap_codec
        = new pbc::MapField<uint, global::SOULS.HKX.HKXClassName>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::SOULS.HKX.HKXClassName.Parser), 18);
    private readonly pbc::MapField<uint, global::SOULS.HKX.HKXClassName> offsetClassNamesMap_ = new pbc::MapField<uint, global::SOULS.HKX.HKXClassName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::SOULS.HKX.HKXClassName> OffsetClassNamesMap {
      get { return offsetClassNamesMap_; }
    }

    /// <summary>Field number for the "SectionOffset" field.</summary>
    public const int SectionOffsetFieldNumber = 3;
    private uint sectionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SectionOffset {
      get { return sectionOffset_; }
      set {
        sectionOffset_ = value;
      }
    }

    /// <summary>Field number for the "DataSize" field.</summary>
    public const int DataSizeFieldNumber = 4;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HKXClassNames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HKXClassNames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!classNames_.Equals(other.classNames_)) return false;
      if (!OffsetClassNamesMap.Equals(other.OffsetClassNamesMap)) return false;
      if (SectionOffset != other.SectionOffset) return false;
      if (DataSize != other.DataSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= classNames_.GetHashCode();
      hash ^= OffsetClassNamesMap.GetHashCode();
      if (SectionOffset != 0) hash ^= SectionOffset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      classNames_.WriteTo(output, _repeated_classNames_codec);
      offsetClassNamesMap_.WriteTo(output, _map_offsetClassNamesMap_codec);
      if (SectionOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SectionOffset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DataSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += classNames_.CalculateSize(_repeated_classNames_codec);
      size += offsetClassNamesMap_.CalculateSize(_map_offsetClassNamesMap_codec);
      if (SectionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SectionOffset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HKXClassNames other) {
      if (other == null) {
        return;
      }
      classNames_.Add(other.classNames_);
      offsetClassNamesMap_.Add(other.offsetClassNamesMap_);
      if (other.SectionOffset != 0) {
        SectionOffset = other.SectionOffset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            classNames_.AddEntriesFrom(input, _repeated_classNames_codec);
            break;
          }
          case 18: {
            offsetClassNamesMap_.AddEntriesFrom(input, _map_offsetClassNamesMap_codec);
            break;
          }
          case 24: {
            SectionOffset = input.ReadUInt32();
            break;
          }
          case 32: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
