// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BinderFile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SOULS.BinderFile {

  /// <summary>Holder for reflection information generated from BinderFile.proto</summary>
  public static partial class BinderFileReflection {

    #region Descriptor
    /// <summary>File descriptor for BinderFile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BinderFileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBCaW5kZXJGaWxlLnByb3RvEhBTT1VMUy5CaW5kZXJGaWxlGgxCaW5kZXIu",
            "cHJvdG8aCURDWC5wcm90byKHAQoKQmluZGVyRmlsZRImCgVGbGFncxgBIAEo",
            "CzIXLlNPVUxTLkJpbmRlci5GaWxlRmxhZ3MSCgoCSUQYAiABKAUSDAoETmFt",
            "ZRgDIAEoCRINCgVCeXRlcxgEIAMoBRIoCg9Db21wcmVzc2lvblR5cGUYBSAB",
            "KAsyDy5TT1VMUy5EQ1guVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SOULS.Binder.BinderReflection.Descriptor, global::SOULS.DCX.DCXReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.BinderFile.BinderFile), global::SOULS.BinderFile.BinderFile.Parser, new[]{ "Flags", "ID", "Name", "Bytes", "CompressionType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BinderFile : pb::IMessage<BinderFile> {
    private static readonly pb::MessageParser<BinderFile> _parser = new pb::MessageParser<BinderFile>(() => new BinderFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinderFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.BinderFile.BinderFileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinderFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinderFile(BinderFile other) : this() {
      flags_ = other.flags_ != null ? other.flags_.Clone() : null;
      iD_ = other.iD_;
      name_ = other.name_;
      bytes_ = other.bytes_.Clone();
      compressionType_ = other.compressionType_ != null ? other.compressionType_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinderFile Clone() {
      return new BinderFile(this);
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 1;
    private global::SOULS.Binder.FileFlags flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Binder.FileFlags Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_bytes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> bytes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bytes {
      get { return bytes_; }
    }

    /// <summary>Field number for the "CompressionType" field.</summary>
    public const int CompressionTypeFieldNumber = 5;
    private global::SOULS.DCX.Type compressionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.DCX.Type CompressionType {
      get { return compressionType_; }
      set {
        compressionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinderFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinderFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Flags, other.Flags)) return false;
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if(!bytes_.Equals(other.bytes_)) return false;
      if (!object.Equals(CompressionType, other.CompressionType)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (flags_ != null) hash ^= Flags.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= bytes_.GetHashCode();
      if (compressionType_ != null) hash ^= CompressionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (flags_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Flags);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      bytes_.WriteTo(output, _repeated_bytes_codec);
      if (compressionType_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CompressionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += bytes_.CalculateSize(_repeated_bytes_codec);
      if (compressionType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompressionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinderFile other) {
      if (other == null) {
        return;
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          Flags = new global::SOULS.Binder.FileFlags();
        }
        Flags.MergeFrom(other.Flags);
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      bytes_.Add(other.bytes_);
      if (other.compressionType_ != null) {
        if (compressionType_ == null) {
          CompressionType = new global::SOULS.DCX.Type();
        }
        CompressionType.MergeFrom(other.CompressionType);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (flags_ == null) {
              Flags = new global::SOULS.Binder.FileFlags();
            }
            input.ReadMessage(Flags);
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            bytes_.AddEntriesFrom(input, _repeated_bytes_codec);
            break;
          }
          case 42: {
            if (compressionType_ == null) {
              CompressionType = new global::SOULS.DCX.Type();
            }
            input.ReadMessage(CompressionType);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
