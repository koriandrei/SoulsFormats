// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FLVER.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SOULS.FLVER {

  /// <summary>Holder for reflection information generated from FLVER.proto</summary>
  public static partial class FLVERReflection {

    #region Descriptor
    /// <summary>File descriptor for FLVER.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FLVERReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtGTFZFUi5wcm90bxILU09VTFMuRkxWRVIaDVZlY3RvcjMucHJvdG8aC0Nv",
            "bG9yLnByb3RvGg1WZWN0b3I0LnByb3RvIh0KCkxheW91dFR5cGUSDwoHdmFs",
            "dWVfXxgBIAEoDSIhCg5MYXlvdXRTZW1hbnRpYxIPCgd2YWx1ZV9fGAEgASgN",
            "IjkKC1ZlcnRleENvbG9yEgkKAUEYASABKAISCQoBUhgCIAEoAhIJCgFHGAMg",
            "ASgCEgkKAUIYBCABKAIiMQoRVmVydGV4Qm9uZVdlaWdodHMSDgoGTGVuZ3Ro",
            "GAEgASgFEgwKBEl0ZW0YAiABKAIiMQoRVmVydGV4Qm9uZUluZGljZXMSDgoG",
            "TGVuZ3RoGAEgASgFEgwKBEl0ZW0YAiABKAUi4gIKBEJvbmUSDAoETmFtZRgB",
            "IAEoCRITCgtQYXJlbnRJbmRleBgCIAEoBRISCgpDaGlsZEluZGV4GAMgASgF",
            "EhgKEE5leHRTaWJsaW5nSW5kZXgYBCABKAUSHAoUUHJldmlvdXNTaWJsaW5n",
            "SW5kZXgYBSABKAUSKwoLVHJhbnNsYXRpb24YBiABKAsyFi5TT1VMUy5WZWN0",
            "b3IzLlZlY3RvcjMSKAoIUm90YXRpb24YByABKAsyFi5TT1VMUy5WZWN0b3Iz",
            "LlZlY3RvcjMSJQoFU2NhbGUYCCABKAsyFi5TT1VMUy5WZWN0b3IzLlZlY3Rv",
            "cjMSLgoOQm91bmRpbmdCb3hNaW4YCSABKAsyFi5TT1VMUy5WZWN0b3IzLlZl",
            "Y3RvcjMSLgoOQm91bmRpbmdCb3hNYXgYCiABKAsyFi5TT1VMUy5WZWN0b3Iz",
            "LlZlY3RvcjMSDQoFVW5rM0MYCyABKAUisgIKBUR1bW15EigKCFBvc2l0aW9u",
            "GAEgASgLMhYuU09VTFMuVmVjdG9yMy5WZWN0b3IzEicKB0ZvcndhcmQYAiAB",
            "KAsyFi5TT1VMUy5WZWN0b3IzLlZlY3RvcjMSJgoGVXB3YXJkGAMgASgLMhYu",
            "U09VTFMuVmVjdG9yMy5WZWN0b3IzEhMKC1JlZmVyZW5jZUlEGAQgASgFEhcK",
            "D1BhcmVudEJvbmVJbmRleBgFIAEoBRIXCg9BdHRhY2hCb25lSW5kZXgYBiAB",
            "KAUSIQoFQ29sb3IYByABKAsyEi5TT1VMUy5Db2xvci5Db2xvchINCgVGbGFn",
            "MRgIIAEoCBIXCg9Vc2VVcHdhcmRWZWN0b3IYCSABKAgSDQoFVW5rMzAYCiAB",
            "KAUSDQoFVW5rMzQYCyABKAUikAEKDExheW91dE1lbWJlchINCgVVbmswMBgB",
            "IAEoBRIlCgRUeXBlGAIgASgLMhcuU09VTFMuRkxWRVIuTGF5b3V0VHlwZRIt",
            "CghTZW1hbnRpYxgDIAEoCzIbLlNPVUxTLkZMVkVSLkxheW91dFNlbWFudGlj",
            "Eg0KBUluZGV4GAQgASgFEgwKBFNpemUYBSABKAUiqwMKBlZlcnRleBIoCghQ",
            "b3NpdGlvbhgBIAEoCzIWLlNPVUxTLlZlY3RvcjMuVmVjdG9yMxIzCgtCb25l",
            "V2VpZ2h0cxgCIAEoCzIeLlNPVUxTLkZMVkVSLlZlcnRleEJvbmVXZWlnaHRz",
            "EhcKD1VzZXNCb25lV2VpZ2h0cxgDIAEoCBIzCgtCb25lSW5kaWNlcxgEIAEo",
            "CzIeLlNPVUxTLkZMVkVSLlZlcnRleEJvbmVJbmRpY2VzEhcKD1VzZXNCb25l",
            "SW5kaWNlcxgFIAEoCBImCgZOb3JtYWwYBiABKAsyFi5TT1VMUy5WZWN0b3Iz",
            "LlZlY3RvcjMSDwoHTm9ybWFsVxgHIAEoBRIjCgNVVnMYCCADKAsyFi5TT1VM",
            "Uy5WZWN0b3IzLlZlY3RvcjMSKAoIVGFuZ2VudHMYCSADKAsyFi5TT1VMUy5W",
            "ZWN0b3I0LlZlY3RvcjQSKQoJQml0YW5nZW50GAogASgLMhYuU09VTFMuVmVj",
            "dG9yNC5WZWN0b3I0EigKBkNvbG9ycxgLIAMoCzIYLlNPVUxTLkZMVkVSLlZl",
            "cnRleENvbG9yYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SOULS.Vector3.Vector3Reflection.Descriptor, global::SOULS.Color.ColorReflection.Descriptor, global::SOULS.Vector4.Vector4Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.LayoutType), global::SOULS.FLVER.LayoutType.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.LayoutSemantic), global::SOULS.FLVER.LayoutSemantic.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.VertexColor), global::SOULS.FLVER.VertexColor.Parser, new[]{ "A", "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.VertexBoneWeights), global::SOULS.FLVER.VertexBoneWeights.Parser, new[]{ "Length", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.VertexBoneIndices), global::SOULS.FLVER.VertexBoneIndices.Parser, new[]{ "Length", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.Bone), global::SOULS.FLVER.Bone.Parser, new[]{ "Name", "ParentIndex", "ChildIndex", "NextSiblingIndex", "PreviousSiblingIndex", "Translation", "Rotation", "Scale", "BoundingBoxMin", "BoundingBoxMax", "Unk3C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.Dummy), global::SOULS.FLVER.Dummy.Parser, new[]{ "Position", "Forward", "Upward", "ReferenceID", "ParentBoneIndex", "AttachBoneIndex", "Color", "Flag1", "UseUpwardVector", "Unk30", "Unk34" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.LayoutMember), global::SOULS.FLVER.LayoutMember.Parser, new[]{ "Unk00", "Type", "Semantic", "Index", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER.Vertex), global::SOULS.FLVER.Vertex.Parser, new[]{ "Position", "BoneWeights", "UsesBoneWeights", "BoneIndices", "UsesBoneIndices", "Normal", "NormalW", "UVs", "Tangents", "Bitangent", "Colors" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LayoutType : pb::IMessage<LayoutType> {
    private static readonly pb::MessageParser<LayoutType> _parser = new pb::MessageParser<LayoutType>(() => new LayoutType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayoutType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutType(LayoutType other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutType Clone() {
      return new LayoutType(this);
    }

    /// <summary>Field number for the "value__" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayoutType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayoutType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayoutType other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LayoutSemantic : pb::IMessage<LayoutSemantic> {
    private static readonly pb::MessageParser<LayoutSemantic> _parser = new pb::MessageParser<LayoutSemantic>(() => new LayoutSemantic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayoutSemantic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutSemantic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutSemantic(LayoutSemantic other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutSemantic Clone() {
      return new LayoutSemantic(this);
    }

    /// <summary>Field number for the "value__" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayoutSemantic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayoutSemantic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayoutSemantic other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VertexColor : pb::IMessage<VertexColor> {
    private static readonly pb::MessageParser<VertexColor> _parser = new pb::MessageParser<VertexColor>(() => new VertexColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VertexColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexColor(VertexColor other) : this() {
      a_ = other.a_;
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexColor Clone() {
      return new VertexColor(this);
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 1;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 2;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 3;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 4;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VertexColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VertexColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(A);
      }
      if (R != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0F) {
        size += 1 + 4;
      }
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VertexColor other) {
      if (other == null) {
        return;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            A = input.ReadFloat();
            break;
          }
          case 21: {
            R = input.ReadFloat();
            break;
          }
          case 29: {
            G = input.ReadFloat();
            break;
          }
          case 37: {
            B = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VertexBoneWeights : pb::IMessage<VertexBoneWeights> {
    private static readonly pb::MessageParser<VertexBoneWeights> _parser = new pb::MessageParser<VertexBoneWeights>(() => new VertexBoneWeights());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VertexBoneWeights> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBoneWeights() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBoneWeights(VertexBoneWeights other) : this() {
      length_ = other.length_;
      item_ = other.item_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBoneWeights Clone() {
      return new VertexBoneWeights(this);
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 1;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private float item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VertexBoneWeights);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VertexBoneWeights other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Length != other.Length) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Item != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Item);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Length != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Length);
      }
      if (Item != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Item != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VertexBoneWeights other) {
      if (other == null) {
        return;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Item != 0F) {
        Item = other.Item;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Length = input.ReadInt32();
            break;
          }
          case 21: {
            Item = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VertexBoneIndices : pb::IMessage<VertexBoneIndices> {
    private static readonly pb::MessageParser<VertexBoneIndices> _parser = new pb::MessageParser<VertexBoneIndices>(() => new VertexBoneIndices());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VertexBoneIndices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBoneIndices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBoneIndices(VertexBoneIndices other) : this() {
      length_ = other.length_;
      item_ = other.item_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBoneIndices Clone() {
      return new VertexBoneIndices(this);
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 1;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private int item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VertexBoneIndices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VertexBoneIndices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Length != other.Length) return false;
      if (Item != other.Item) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Item != 0) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Length != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Length);
      }
      if (Item != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Item != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VertexBoneIndices other) {
      if (other == null) {
        return;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Item != 0) {
        Item = other.Item;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Length = input.ReadInt32();
            break;
          }
          case 16: {
            Item = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bone : pb::IMessage<Bone> {
    private static readonly pb::MessageParser<Bone> _parser = new pb::MessageParser<Bone>(() => new Bone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone(Bone other) : this() {
      name_ = other.name_;
      parentIndex_ = other.parentIndex_;
      childIndex_ = other.childIndex_;
      nextSiblingIndex_ = other.nextSiblingIndex_;
      previousSiblingIndex_ = other.previousSiblingIndex_;
      translation_ = other.translation_ != null ? other.translation_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      boundingBoxMin_ = other.boundingBoxMin_ != null ? other.boundingBoxMin_.Clone() : null;
      boundingBoxMax_ = other.boundingBoxMax_ != null ? other.boundingBoxMax_.Clone() : null;
      unk3C_ = other.unk3C_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone Clone() {
      return new Bone(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ParentIndex" field.</summary>
    public const int ParentIndexFieldNumber = 2;
    private int parentIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentIndex {
      get { return parentIndex_; }
      set {
        parentIndex_ = value;
      }
    }

    /// <summary>Field number for the "ChildIndex" field.</summary>
    public const int ChildIndexFieldNumber = 3;
    private int childIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChildIndex {
      get { return childIndex_; }
      set {
        childIndex_ = value;
      }
    }

    /// <summary>Field number for the "NextSiblingIndex" field.</summary>
    public const int NextSiblingIndexFieldNumber = 4;
    private int nextSiblingIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextSiblingIndex {
      get { return nextSiblingIndex_; }
      set {
        nextSiblingIndex_ = value;
      }
    }

    /// <summary>Field number for the "PreviousSiblingIndex" field.</summary>
    public const int PreviousSiblingIndexFieldNumber = 5;
    private int previousSiblingIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviousSiblingIndex {
      get { return previousSiblingIndex_; }
      set {
        previousSiblingIndex_ = value;
      }
    }

    /// <summary>Field number for the "Translation" field.</summary>
    public const int TranslationFieldNumber = 6;
    private global::SOULS.Vector3.Vector3 translation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 7;
    private global::SOULS.Vector3.Vector3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 8;
    private global::SOULS.Vector3.Vector3 scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "BoundingBoxMin" field.</summary>
    public const int BoundingBoxMinFieldNumber = 9;
    private global::SOULS.Vector3.Vector3 boundingBoxMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 BoundingBoxMin {
      get { return boundingBoxMin_; }
      set {
        boundingBoxMin_ = value;
      }
    }

    /// <summary>Field number for the "BoundingBoxMax" field.</summary>
    public const int BoundingBoxMaxFieldNumber = 10;
    private global::SOULS.Vector3.Vector3 boundingBoxMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 BoundingBoxMax {
      get { return boundingBoxMax_; }
      set {
        boundingBoxMax_ = value;
      }
    }

    /// <summary>Field number for the "Unk3C" field.</summary>
    public const int Unk3CFieldNumber = 11;
    private int unk3C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk3C {
      get { return unk3C_; }
      set {
        unk3C_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ParentIndex != other.ParentIndex) return false;
      if (ChildIndex != other.ChildIndex) return false;
      if (NextSiblingIndex != other.NextSiblingIndex) return false;
      if (PreviousSiblingIndex != other.PreviousSiblingIndex) return false;
      if (!object.Equals(Translation, other.Translation)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(BoundingBoxMin, other.BoundingBoxMin)) return false;
      if (!object.Equals(BoundingBoxMax, other.BoundingBoxMax)) return false;
      if (Unk3C != other.Unk3C) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ParentIndex != 0) hash ^= ParentIndex.GetHashCode();
      if (ChildIndex != 0) hash ^= ChildIndex.GetHashCode();
      if (NextSiblingIndex != 0) hash ^= NextSiblingIndex.GetHashCode();
      if (PreviousSiblingIndex != 0) hash ^= PreviousSiblingIndex.GetHashCode();
      if (translation_ != null) hash ^= Translation.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (boundingBoxMin_ != null) hash ^= BoundingBoxMin.GetHashCode();
      if (boundingBoxMax_ != null) hash ^= BoundingBoxMax.GetHashCode();
      if (Unk3C != 0) hash ^= Unk3C.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ParentIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentIndex);
      }
      if (ChildIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChildIndex);
      }
      if (NextSiblingIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NextSiblingIndex);
      }
      if (PreviousSiblingIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PreviousSiblingIndex);
      }
      if (translation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Rotation);
      }
      if (scale_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Scale);
      }
      if (boundingBoxMin_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(BoundingBoxMin);
      }
      if (boundingBoxMax_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(BoundingBoxMax);
      }
      if (Unk3C != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Unk3C);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ParentIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentIndex);
      }
      if (ChildIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChildIndex);
      }
      if (NextSiblingIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSiblingIndex);
      }
      if (PreviousSiblingIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreviousSiblingIndex);
      }
      if (translation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (boundingBoxMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBoxMin);
      }
      if (boundingBoxMax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBoxMax);
      }
      if (Unk3C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk3C);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bone other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ParentIndex != 0) {
        ParentIndex = other.ParentIndex;
      }
      if (other.ChildIndex != 0) {
        ChildIndex = other.ChildIndex;
      }
      if (other.NextSiblingIndex != 0) {
        NextSiblingIndex = other.NextSiblingIndex;
      }
      if (other.PreviousSiblingIndex != 0) {
        PreviousSiblingIndex = other.PreviousSiblingIndex;
      }
      if (other.translation_ != null) {
        if (translation_ == null) {
          Translation = new global::SOULS.Vector3.Vector3();
        }
        Translation.MergeFrom(other.Translation);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::SOULS.Vector3.Vector3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::SOULS.Vector3.Vector3();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.boundingBoxMin_ != null) {
        if (boundingBoxMin_ == null) {
          BoundingBoxMin = new global::SOULS.Vector3.Vector3();
        }
        BoundingBoxMin.MergeFrom(other.BoundingBoxMin);
      }
      if (other.boundingBoxMax_ != null) {
        if (boundingBoxMax_ == null) {
          BoundingBoxMax = new global::SOULS.Vector3.Vector3();
        }
        BoundingBoxMax.MergeFrom(other.BoundingBoxMax);
      }
      if (other.Unk3C != 0) {
        Unk3C = other.Unk3C;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            ParentIndex = input.ReadInt32();
            break;
          }
          case 24: {
            ChildIndex = input.ReadInt32();
            break;
          }
          case 32: {
            NextSiblingIndex = input.ReadInt32();
            break;
          }
          case 40: {
            PreviousSiblingIndex = input.ReadInt32();
            break;
          }
          case 50: {
            if (translation_ == null) {
              Translation = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Translation);
            break;
          }
          case 58: {
            if (rotation_ == null) {
              Rotation = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 66: {
            if (scale_ == null) {
              Scale = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 74: {
            if (boundingBoxMin_ == null) {
              BoundingBoxMin = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(BoundingBoxMin);
            break;
          }
          case 82: {
            if (boundingBoxMax_ == null) {
              BoundingBoxMax = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(BoundingBoxMax);
            break;
          }
          case 88: {
            Unk3C = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dummy : pb::IMessage<Dummy> {
    private static readonly pb::MessageParser<Dummy> _parser = new pb::MessageParser<Dummy>(() => new Dummy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dummy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dummy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dummy(Dummy other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      forward_ = other.forward_ != null ? other.forward_.Clone() : null;
      upward_ = other.upward_ != null ? other.upward_.Clone() : null;
      referenceID_ = other.referenceID_;
      parentBoneIndex_ = other.parentBoneIndex_;
      attachBoneIndex_ = other.attachBoneIndex_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      flag1_ = other.flag1_;
      useUpwardVector_ = other.useUpwardVector_;
      unk30_ = other.unk30_;
      unk34_ = other.unk34_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dummy Clone() {
      return new Dummy(this);
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::SOULS.Vector3.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 2;
    private global::SOULS.Vector3.Vector3 forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "Upward" field.</summary>
    public const int UpwardFieldNumber = 3;
    private global::SOULS.Vector3.Vector3 upward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Upward {
      get { return upward_; }
      set {
        upward_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceID" field.</summary>
    public const int ReferenceIDFieldNumber = 4;
    private int referenceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReferenceID {
      get { return referenceID_; }
      set {
        referenceID_ = value;
      }
    }

    /// <summary>Field number for the "ParentBoneIndex" field.</summary>
    public const int ParentBoneIndexFieldNumber = 5;
    private int parentBoneIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentBoneIndex {
      get { return parentBoneIndex_; }
      set {
        parentBoneIndex_ = value;
      }
    }

    /// <summary>Field number for the "AttachBoneIndex" field.</summary>
    public const int AttachBoneIndexFieldNumber = 6;
    private int attachBoneIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttachBoneIndex {
      get { return attachBoneIndex_; }
      set {
        attachBoneIndex_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 7;
    private global::SOULS.Color.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Color.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Flag1" field.</summary>
    public const int Flag1FieldNumber = 8;
    private bool flag1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag1 {
      get { return flag1_; }
      set {
        flag1_ = value;
      }
    }

    /// <summary>Field number for the "UseUpwardVector" field.</summary>
    public const int UseUpwardVectorFieldNumber = 9;
    private bool useUpwardVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseUpwardVector {
      get { return useUpwardVector_; }
      set {
        useUpwardVector_ = value;
      }
    }

    /// <summary>Field number for the "Unk30" field.</summary>
    public const int Unk30FieldNumber = 10;
    private int unk30_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk30 {
      get { return unk30_; }
      set {
        unk30_ = value;
      }
    }

    /// <summary>Field number for the "Unk34" field.</summary>
    public const int Unk34FieldNumber = 11;
    private int unk34_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk34 {
      get { return unk34_; }
      set {
        unk34_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dummy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dummy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (!object.Equals(Upward, other.Upward)) return false;
      if (ReferenceID != other.ReferenceID) return false;
      if (ParentBoneIndex != other.ParentBoneIndex) return false;
      if (AttachBoneIndex != other.AttachBoneIndex) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Flag1 != other.Flag1) return false;
      if (UseUpwardVector != other.UseUpwardVector) return false;
      if (Unk30 != other.Unk30) return false;
      if (Unk34 != other.Unk34) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (upward_ != null) hash ^= Upward.GetHashCode();
      if (ReferenceID != 0) hash ^= ReferenceID.GetHashCode();
      if (ParentBoneIndex != 0) hash ^= ParentBoneIndex.GetHashCode();
      if (AttachBoneIndex != 0) hash ^= AttachBoneIndex.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Flag1 != false) hash ^= Flag1.GetHashCode();
      if (UseUpwardVector != false) hash ^= UseUpwardVector.GetHashCode();
      if (Unk30 != 0) hash ^= Unk30.GetHashCode();
      if (Unk34 != 0) hash ^= Unk34.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (forward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Forward);
      }
      if (upward_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Upward);
      }
      if (ReferenceID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReferenceID);
      }
      if (ParentBoneIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ParentBoneIndex);
      }
      if (AttachBoneIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttachBoneIndex);
      }
      if (color_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Color);
      }
      if (Flag1 != false) {
        output.WriteRawTag(64);
        output.WriteBool(Flag1);
      }
      if (UseUpwardVector != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseUpwardVector);
      }
      if (Unk30 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Unk30);
      }
      if (Unk34 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Unk34);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (upward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Upward);
      }
      if (ReferenceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceID);
      }
      if (ParentBoneIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentBoneIndex);
      }
      if (AttachBoneIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachBoneIndex);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Flag1 != false) {
        size += 1 + 1;
      }
      if (UseUpwardVector != false) {
        size += 1 + 1;
      }
      if (Unk30 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk30);
      }
      if (Unk34 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk34);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dummy other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::SOULS.Vector3.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          Forward = new global::SOULS.Vector3.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.upward_ != null) {
        if (upward_ == null) {
          Upward = new global::SOULS.Vector3.Vector3();
        }
        Upward.MergeFrom(other.Upward);
      }
      if (other.ReferenceID != 0) {
        ReferenceID = other.ReferenceID;
      }
      if (other.ParentBoneIndex != 0) {
        ParentBoneIndex = other.ParentBoneIndex;
      }
      if (other.AttachBoneIndex != 0) {
        AttachBoneIndex = other.AttachBoneIndex;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::SOULS.Color.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Flag1 != false) {
        Flag1 = other.Flag1;
      }
      if (other.UseUpwardVector != false) {
        UseUpwardVector = other.UseUpwardVector;
      }
      if (other.Unk30 != 0) {
        Unk30 = other.Unk30;
      }
      if (other.Unk34 != 0) {
        Unk34 = other.Unk34;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (forward_ == null) {
              Forward = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 26: {
            if (upward_ == null) {
              Upward = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Upward);
            break;
          }
          case 32: {
            ReferenceID = input.ReadInt32();
            break;
          }
          case 40: {
            ParentBoneIndex = input.ReadInt32();
            break;
          }
          case 48: {
            AttachBoneIndex = input.ReadInt32();
            break;
          }
          case 58: {
            if (color_ == null) {
              Color = new global::SOULS.Color.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 64: {
            Flag1 = input.ReadBool();
            break;
          }
          case 72: {
            UseUpwardVector = input.ReadBool();
            break;
          }
          case 80: {
            Unk30 = input.ReadInt32();
            break;
          }
          case 88: {
            Unk34 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LayoutMember : pb::IMessage<LayoutMember> {
    private static readonly pb::MessageParser<LayoutMember> _parser = new pb::MessageParser<LayoutMember>(() => new LayoutMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayoutMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutMember(LayoutMember other) : this() {
      unk00_ = other.unk00_;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      semantic_ = other.semantic_ != null ? other.semantic_.Clone() : null;
      index_ = other.index_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayoutMember Clone() {
      return new LayoutMember(this);
    }

    /// <summary>Field number for the "Unk00" field.</summary>
    public const int Unk00FieldNumber = 1;
    private int unk00_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk00 {
      get { return unk00_; }
      set {
        unk00_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::SOULS.FLVER.LayoutType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER.LayoutType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Semantic" field.</summary>
    public const int SemanticFieldNumber = 3;
    private global::SOULS.FLVER.LayoutSemantic semantic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER.LayoutSemantic Semantic {
      get { return semantic_; }
      set {
        semantic_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 5;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayoutMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayoutMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unk00 != other.Unk00) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Semantic, other.Semantic)) return false;
      if (Index != other.Index) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unk00 != 0) hash ^= Unk00.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (semantic_ != null) hash ^= Semantic.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unk00 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Unk00);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (semantic_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Semantic);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
      if (Size != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unk00 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk00);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (semantic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Semantic);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayoutMember other) {
      if (other == null) {
        return;
      }
      if (other.Unk00 != 0) {
        Unk00 = other.Unk00;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::SOULS.FLVER.LayoutType();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.semantic_ != null) {
        if (semantic_ == null) {
          Semantic = new global::SOULS.FLVER.LayoutSemantic();
        }
        Semantic.MergeFrom(other.Semantic);
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unk00 = input.ReadInt32();
            break;
          }
          case 18: {
            if (type_ == null) {
              Type = new global::SOULS.FLVER.LayoutType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 26: {
            if (semantic_ == null) {
              Semantic = new global::SOULS.FLVER.LayoutSemantic();
            }
            input.ReadMessage(Semantic);
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
          case 40: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vertex : pb::IMessage<Vertex> {
    private static readonly pb::MessageParser<Vertex> _parser = new pb::MessageParser<Vertex>(() => new Vertex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vertex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER.FLVERReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vertex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vertex(Vertex other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      boneWeights_ = other.boneWeights_ != null ? other.boneWeights_.Clone() : null;
      usesBoneWeights_ = other.usesBoneWeights_;
      boneIndices_ = other.boneIndices_ != null ? other.boneIndices_.Clone() : null;
      usesBoneIndices_ = other.usesBoneIndices_;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      normalW_ = other.normalW_;
      uVs_ = other.uVs_.Clone();
      tangents_ = other.tangents_.Clone();
      bitangent_ = other.bitangent_ != null ? other.bitangent_.Clone() : null;
      colors_ = other.colors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vertex Clone() {
      return new Vertex(this);
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::SOULS.Vector3.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "BoneWeights" field.</summary>
    public const int BoneWeightsFieldNumber = 2;
    private global::SOULS.FLVER.VertexBoneWeights boneWeights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER.VertexBoneWeights BoneWeights {
      get { return boneWeights_; }
      set {
        boneWeights_ = value;
      }
    }

    /// <summary>Field number for the "UsesBoneWeights" field.</summary>
    public const int UsesBoneWeightsFieldNumber = 3;
    private bool usesBoneWeights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsesBoneWeights {
      get { return usesBoneWeights_; }
      set {
        usesBoneWeights_ = value;
      }
    }

    /// <summary>Field number for the "BoneIndices" field.</summary>
    public const int BoneIndicesFieldNumber = 4;
    private global::SOULS.FLVER.VertexBoneIndices boneIndices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER.VertexBoneIndices BoneIndices {
      get { return boneIndices_; }
      set {
        boneIndices_ = value;
      }
    }

    /// <summary>Field number for the "UsesBoneIndices" field.</summary>
    public const int UsesBoneIndicesFieldNumber = 5;
    private bool usesBoneIndices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsesBoneIndices {
      get { return usesBoneIndices_; }
      set {
        usesBoneIndices_ = value;
      }
    }

    /// <summary>Field number for the "Normal" field.</summary>
    public const int NormalFieldNumber = 6;
    private global::SOULS.Vector3.Vector3 normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "NormalW" field.</summary>
    public const int NormalWFieldNumber = 7;
    private int normalW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalW {
      get { return normalW_; }
      set {
        normalW_ = value;
      }
    }

    /// <summary>Field number for the "UVs" field.</summary>
    public const int UVsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SOULS.Vector3.Vector3> _repeated_uVs_codec
        = pb::FieldCodec.ForMessage(66, global::SOULS.Vector3.Vector3.Parser);
    private readonly pbc::RepeatedField<global::SOULS.Vector3.Vector3> uVs_ = new pbc::RepeatedField<global::SOULS.Vector3.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.Vector3.Vector3> UVs {
      get { return uVs_; }
    }

    /// <summary>Field number for the "Tangents" field.</summary>
    public const int TangentsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::SOULS.Vector4.Vector4> _repeated_tangents_codec
        = pb::FieldCodec.ForMessage(74, global::SOULS.Vector4.Vector4.Parser);
    private readonly pbc::RepeatedField<global::SOULS.Vector4.Vector4> tangents_ = new pbc::RepeatedField<global::SOULS.Vector4.Vector4>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.Vector4.Vector4> Tangents {
      get { return tangents_; }
    }

    /// <summary>Field number for the "Bitangent" field.</summary>
    public const int BitangentFieldNumber = 10;
    private global::SOULS.Vector4.Vector4 bitangent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector4.Vector4 Bitangent {
      get { return bitangent_; }
      set {
        bitangent_ = value;
      }
    }

    /// <summary>Field number for the "Colors" field.</summary>
    public const int ColorsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::SOULS.FLVER.VertexColor> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(90, global::SOULS.FLVER.VertexColor.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER.VertexColor> colors_ = new pbc::RepeatedField<global::SOULS.FLVER.VertexColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER.VertexColor> Colors {
      get { return colors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vertex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vertex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(BoneWeights, other.BoneWeights)) return false;
      if (UsesBoneWeights != other.UsesBoneWeights) return false;
      if (!object.Equals(BoneIndices, other.BoneIndices)) return false;
      if (UsesBoneIndices != other.UsesBoneIndices) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (NormalW != other.NormalW) return false;
      if(!uVs_.Equals(other.uVs_)) return false;
      if(!tangents_.Equals(other.tangents_)) return false;
      if (!object.Equals(Bitangent, other.Bitangent)) return false;
      if(!colors_.Equals(other.colors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (boneWeights_ != null) hash ^= BoneWeights.GetHashCode();
      if (UsesBoneWeights != false) hash ^= UsesBoneWeights.GetHashCode();
      if (boneIndices_ != null) hash ^= BoneIndices.GetHashCode();
      if (UsesBoneIndices != false) hash ^= UsesBoneIndices.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (NormalW != 0) hash ^= NormalW.GetHashCode();
      hash ^= uVs_.GetHashCode();
      hash ^= tangents_.GetHashCode();
      if (bitangent_ != null) hash ^= Bitangent.GetHashCode();
      hash ^= colors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (boneWeights_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoneWeights);
      }
      if (UsesBoneWeights != false) {
        output.WriteRawTag(24);
        output.WriteBool(UsesBoneWeights);
      }
      if (boneIndices_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BoneIndices);
      }
      if (UsesBoneIndices != false) {
        output.WriteRawTag(40);
        output.WriteBool(UsesBoneIndices);
      }
      if (normal_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Normal);
      }
      if (NormalW != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NormalW);
      }
      uVs_.WriteTo(output, _repeated_uVs_codec);
      tangents_.WriteTo(output, _repeated_tangents_codec);
      if (bitangent_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Bitangent);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (boneWeights_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoneWeights);
      }
      if (UsesBoneWeights != false) {
        size += 1 + 1;
      }
      if (boneIndices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoneIndices);
      }
      if (UsesBoneIndices != false) {
        size += 1 + 1;
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (NormalW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalW);
      }
      size += uVs_.CalculateSize(_repeated_uVs_codec);
      size += tangents_.CalculateSize(_repeated_tangents_codec);
      if (bitangent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bitangent);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vertex other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::SOULS.Vector3.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.boneWeights_ != null) {
        if (boneWeights_ == null) {
          BoneWeights = new global::SOULS.FLVER.VertexBoneWeights();
        }
        BoneWeights.MergeFrom(other.BoneWeights);
      }
      if (other.UsesBoneWeights != false) {
        UsesBoneWeights = other.UsesBoneWeights;
      }
      if (other.boneIndices_ != null) {
        if (boneIndices_ == null) {
          BoneIndices = new global::SOULS.FLVER.VertexBoneIndices();
        }
        BoneIndices.MergeFrom(other.BoneIndices);
      }
      if (other.UsesBoneIndices != false) {
        UsesBoneIndices = other.UsesBoneIndices;
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          Normal = new global::SOULS.Vector3.Vector3();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.NormalW != 0) {
        NormalW = other.NormalW;
      }
      uVs_.Add(other.uVs_);
      tangents_.Add(other.tangents_);
      if (other.bitangent_ != null) {
        if (bitangent_ == null) {
          Bitangent = new global::SOULS.Vector4.Vector4();
        }
        Bitangent.MergeFrom(other.Bitangent);
      }
      colors_.Add(other.colors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (boneWeights_ == null) {
              BoneWeights = new global::SOULS.FLVER.VertexBoneWeights();
            }
            input.ReadMessage(BoneWeights);
            break;
          }
          case 24: {
            UsesBoneWeights = input.ReadBool();
            break;
          }
          case 34: {
            if (boneIndices_ == null) {
              BoneIndices = new global::SOULS.FLVER.VertexBoneIndices();
            }
            input.ReadMessage(BoneIndices);
            break;
          }
          case 40: {
            UsesBoneIndices = input.ReadBool();
            break;
          }
          case 50: {
            if (normal_ == null) {
              Normal = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Normal);
            break;
          }
          case 56: {
            NormalW = input.ReadInt32();
            break;
          }
          case 66: {
            uVs_.AddEntriesFrom(input, _repeated_uVs_codec);
            break;
          }
          case 74: {
            tangents_.AddEntriesFrom(input, _repeated_tangents_codec);
            break;
          }
          case 82: {
            if (bitangent_ == null) {
              Bitangent = new global::SOULS.Vector4.Vector4();
            }
            input.ReadMessage(Bitangent);
            break;
          }
          case 90: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
