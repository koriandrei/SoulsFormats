// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BND4.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SOULS.BND4 {

  /// <summary>Holder for reflection information generated from BND4.proto</summary>
  public static partial class BND4Reflection {

    #region Descriptor
    /// <summary>File descriptor for BND4.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BND4Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpCTkQ0LnByb3RvEgpTT1VMUy5CTkQ0GglEQ1gucHJvdG8aEEJpbmRlckZp",
            "bGUucHJvdG8aDEJpbmRlci5wcm90byL6AQoEQk5ENBIkCgtDb21wcmVzc2lv",
            "bhgBIAEoCzIPLlNPVUxTLkRDWC5UeXBlEisKBUZpbGVzGAIgAygLMhwuU09V",
            "TFMuQmluZGVyRmlsZS5CaW5kZXJGaWxlEg8KB1ZlcnNpb24YAyABKAkSJAoG",
            "Rm9ybWF0GAQgASgLMhQuU09VTFMuQmluZGVyLkZvcm1hdBINCgVVbmswNBgF",
            "IAEoCBINCgVVbmswNRgGIAEoCBIRCglCaWdFbmRpYW4YByABKAgSFAoMQml0",
            "QmlnRW5kaWFuGAggASgIEg8KB1VuaWNvZGUYCSABKAgSEAoIRXh0ZW5kZWQY",
            "CiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SOULS.DCX.DCXReflection.Descriptor, global::SOULS.BinderFile.BinderFileReflection.Descriptor, global::SOULS.Binder.BinderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.BND4.BND4), global::SOULS.BND4.BND4.Parser, new[]{ "Compression", "Files", "Version", "Format", "Unk04", "Unk05", "BigEndian", "BitBigEndian", "Unicode", "Extended" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BND4 : pb::IMessage<BND4> {
    private static readonly pb::MessageParser<BND4> _parser = new pb::MessageParser<BND4>(() => new BND4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BND4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.BND4.BND4Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BND4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BND4(BND4 other) : this() {
      compression_ = other.compression_ != null ? other.compression_.Clone() : null;
      files_ = other.files_.Clone();
      version_ = other.version_;
      format_ = other.format_ != null ? other.format_.Clone() : null;
      unk04_ = other.unk04_;
      unk05_ = other.unk05_;
      bigEndian_ = other.bigEndian_;
      bitBigEndian_ = other.bitBigEndian_;
      unicode_ = other.unicode_;
      extended_ = other.extended_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BND4 Clone() {
      return new BND4(this);
    }

    /// <summary>Field number for the "Compression" field.</summary>
    public const int CompressionFieldNumber = 1;
    private global::SOULS.DCX.Type compression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.DCX.Type Compression {
      get { return compression_; }
      set {
        compression_ = value;
      }
    }

    /// <summary>Field number for the "Files" field.</summary>
    public const int FilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SOULS.BinderFile.BinderFile> _repeated_files_codec
        = pb::FieldCodec.ForMessage(18, global::SOULS.BinderFile.BinderFile.Parser);
    private readonly pbc::RepeatedField<global::SOULS.BinderFile.BinderFile> files_ = new pbc::RepeatedField<global::SOULS.BinderFile.BinderFile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.BinderFile.BinderFile> Files {
      get { return files_; }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Format" field.</summary>
    public const int FormatFieldNumber = 4;
    private global::SOULS.Binder.Format format_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Binder.Format Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "Unk04" field.</summary>
    public const int Unk04FieldNumber = 5;
    private bool unk04_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unk04 {
      get { return unk04_; }
      set {
        unk04_ = value;
      }
    }

    /// <summary>Field number for the "Unk05" field.</summary>
    public const int Unk05FieldNumber = 6;
    private bool unk05_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unk05 {
      get { return unk05_; }
      set {
        unk05_ = value;
      }
    }

    /// <summary>Field number for the "BigEndian" field.</summary>
    public const int BigEndianFieldNumber = 7;
    private bool bigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BigEndian {
      get { return bigEndian_; }
      set {
        bigEndian_ = value;
      }
    }

    /// <summary>Field number for the "BitBigEndian" field.</summary>
    public const int BitBigEndianFieldNumber = 8;
    private bool bitBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BitBigEndian {
      get { return bitBigEndian_; }
      set {
        bitBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "Unicode" field.</summary>
    public const int UnicodeFieldNumber = 9;
    private bool unicode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unicode {
      get { return unicode_; }
      set {
        unicode_ = value;
      }
    }

    /// <summary>Field number for the "Extended" field.</summary>
    public const int ExtendedFieldNumber = 10;
    private int extended_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Extended {
      get { return extended_; }
      set {
        extended_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BND4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BND4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Compression, other.Compression)) return false;
      if(!files_.Equals(other.files_)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Format, other.Format)) return false;
      if (Unk04 != other.Unk04) return false;
      if (Unk05 != other.Unk05) return false;
      if (BigEndian != other.BigEndian) return false;
      if (BitBigEndian != other.BitBigEndian) return false;
      if (Unicode != other.Unicode) return false;
      if (Extended != other.Extended) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (compression_ != null) hash ^= Compression.GetHashCode();
      hash ^= files_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (format_ != null) hash ^= Format.GetHashCode();
      if (Unk04 != false) hash ^= Unk04.GetHashCode();
      if (Unk05 != false) hash ^= Unk05.GetHashCode();
      if (BigEndian != false) hash ^= BigEndian.GetHashCode();
      if (BitBigEndian != false) hash ^= BitBigEndian.GetHashCode();
      if (Unicode != false) hash ^= Unicode.GetHashCode();
      if (Extended != 0) hash ^= Extended.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (compression_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Compression);
      }
      files_.WriteTo(output, _repeated_files_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (format_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Format);
      }
      if (Unk04 != false) {
        output.WriteRawTag(40);
        output.WriteBool(Unk04);
      }
      if (Unk05 != false) {
        output.WriteRawTag(48);
        output.WriteBool(Unk05);
      }
      if (BigEndian != false) {
        output.WriteRawTag(56);
        output.WriteBool(BigEndian);
      }
      if (BitBigEndian != false) {
        output.WriteRawTag(64);
        output.WriteBool(BitBigEndian);
      }
      if (Unicode != false) {
        output.WriteRawTag(72);
        output.WriteBool(Unicode);
      }
      if (Extended != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Extended);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (compression_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compression);
      }
      size += files_.CalculateSize(_repeated_files_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (format_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Format);
      }
      if (Unk04 != false) {
        size += 1 + 1;
      }
      if (Unk05 != false) {
        size += 1 + 1;
      }
      if (BigEndian != false) {
        size += 1 + 1;
      }
      if (BitBigEndian != false) {
        size += 1 + 1;
      }
      if (Unicode != false) {
        size += 1 + 1;
      }
      if (Extended != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Extended);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BND4 other) {
      if (other == null) {
        return;
      }
      if (other.compression_ != null) {
        if (compression_ == null) {
          Compression = new global::SOULS.DCX.Type();
        }
        Compression.MergeFrom(other.Compression);
      }
      files_.Add(other.files_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.format_ != null) {
        if (format_ == null) {
          Format = new global::SOULS.Binder.Format();
        }
        Format.MergeFrom(other.Format);
      }
      if (other.Unk04 != false) {
        Unk04 = other.Unk04;
      }
      if (other.Unk05 != false) {
        Unk05 = other.Unk05;
      }
      if (other.BigEndian != false) {
        BigEndian = other.BigEndian;
      }
      if (other.BitBigEndian != false) {
        BitBigEndian = other.BitBigEndian;
      }
      if (other.Unicode != false) {
        Unicode = other.Unicode;
      }
      if (other.Extended != 0) {
        Extended = other.Extended;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (compression_ == null) {
              Compression = new global::SOULS.DCX.Type();
            }
            input.ReadMessage(Compression);
            break;
          }
          case 18: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            if (format_ == null) {
              Format = new global::SOULS.Binder.Format();
            }
            input.ReadMessage(Format);
            break;
          }
          case 40: {
            Unk04 = input.ReadBool();
            break;
          }
          case 48: {
            Unk05 = input.ReadBool();
            break;
          }
          case 56: {
            BigEndian = input.ReadBool();
            break;
          }
          case 64: {
            BitBigEndian = input.ReadBool();
            break;
          }
          case 72: {
            Unicode = input.ReadBool();
            break;
          }
          case 80: {
            Extended = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
