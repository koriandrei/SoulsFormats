// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FLVER2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SOULS.FLVER2 {

  /// <summary>Holder for reflection information generated from FLVER2.proto</summary>
  public static partial class FLVER2Reflection {

    #region Descriptor
    /// <summary>File descriptor for FLVER2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FLVER2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxGTFZFUjIucHJvdG8SDFNPVUxTLkZMVkVSMhoNVmVjdG9yMi5wcm90bxoL",
            "RkxWRVIucHJvdG8aDVZlY3RvcjMucHJvdG8ifQoITWF0ZXJpYWwSDAoETmFt",
            "ZRgBIAEoCRILCgNNVEQYAiABKAkSDQoFRmxhZ3MYAyABKAUSJwoIVGV4dHVy",
            "ZXMYBCADKAsyFS5TT1VMUy5GTFZFUjIuVGV4dHVyZRIPCgdHWEluZGV4GAUg",
            "ASgFEg0KBVVuazE4GAYgASgFIpcBCgdUZXh0dXJlEgwKBFR5cGUYASABKAkS",
            "DAoEUGF0aBgCIAEoCRIlCgVTY2FsZRgDIAEoCzIWLlNPVUxTLlZlY3RvcjIu",
            "VmVjdG9yMhINCgVVbmsxMBgEIAEoBRINCgVVbmsxMRgFIAEoCBINCgVVbmsx",
            "NBgGIAEoAhINCgVVbmsxOBgHIAEoAhINCgVVbmsxQxgIIAEoAiJnCgZHWExp",
            "c3QSGAoQVGVybWluYXRvckxlbmd0aBgBIAEoBRIQCghDYXBhY2l0eRgCIAEo",
            "BRINCgVDb3VudBgDIAEoBRIiCgRJdGVtGAQgASgLMhQuU09VTFMuRkxWRVIy",
            "LkdYSXRlbSIxCgZHWEl0ZW0SCgoCSUQYASABKAkSDQoFVW5rMDQYAiABKAUS",
            "DAoERGF0YRgDIAMoBSKXAwoETWVzaBIPCgdEeW5hbWljGAEgASgFEhUKDU1h",
            "dGVyaWFsSW5kZXgYAiABKAUSGAoQRGVmYXVsdEJvbmVJbmRleBgDIAEoBRIT",
            "CgtCb25lSW5kaWNlcxgEIAMoBRInCghGYWNlU2V0cxgFIAMoCzIVLlNPVUxT",
            "LkZMVkVSMi5GYWNlU2V0EjEKDVZlcnRleEJ1ZmZlcnMYBiADKAsyGi5TT1VM",
            "Uy5GTFZFUjIuVmVydGV4QnVmZmVyEiUKCFZlcnRpY2VzGAcgAygLMhMuU09V",
            "TFMuRkxWRVIuVmVydGV4EjUKC0JvdW5kaW5nQm94GAggASgLMiAuU09VTFMu",
            "RkxWRVIyLk1lc2guQm91bmRpbmdCb3hlcxp+Cg1Cb3VuZGluZ0JveGVzEiMK",
            "A01pbhgBIAEoCzIWLlNPVUxTLlZlY3RvcjMuVmVjdG9yMxIjCgNNYXgYAiAB",
            "KAsyFi5TT1VMUy5WZWN0b3IzLlZlY3RvcjMSIwoDVW5rGAMgASgLMhYuU09V",
            "TFMuVmVjdG9yMy5WZWN0b3IzIqEBCgdGYWNlU2V0EiwKBUZsYWdzGAEgASgL",
            "Mh0uU09VTFMuRkxWRVIyLkZhY2VTZXQuRlNGbGFncxIVCg1UcmlhbmdsZVN0",
            "cmlwGAIgASgIEhUKDUN1bGxCYWNrZmFjZXMYAyABKAgSDQoFVW5rMDYYBCAB",
            "KAUSDwoHSW5kaWNlcxgFIAMoBRoaCgdGU0ZsYWdzEg8KB3ZhbHVlX18YASAB",
            "KA0iIwoMVmVydGV4QnVmZmVyEhMKC0xheW91dEluZGV4GAEgASgFIn4KDUJv",
            "dW5kaW5nQm94ZXMSIwoDTWluGAEgASgLMhYuU09VTFMuVmVjdG9yMy5WZWN0",
            "b3IzEiMKA01heBgCIAEoCzIWLlNPVUxTLlZlY3RvcjMuVmVjdG9yMxIjCgNV",
            "bmsYAyABKAsyFi5TT1VMUy5WZWN0b3IzLlZlY3RvcjMiZgoMQnVmZmVyTGF5",
            "b3V0EgwKBFNpemUYASABKAUSEAoIQ2FwYWNpdHkYAiABKAUSDQoFQ291bnQY",
            "AyABKAUSJwoESXRlbRgEIAEoCzIZLlNPVUxTLkZMVkVSLkxheW91dE1lbWJl",
            "ciImCgZNZW1iZXISDQoFVW5rMDAYASADKAUSDQoFSW5kZXgYAiABKAUiGgoH",
            "RlNGbGFncxIPCgd2YWx1ZV9fGAEgASgNIu0BCgtGTFZFUkhlYWRlchIRCglC",
            "aWdFbmRpYW4YASABKAgSDwoHVmVyc2lvbhgCIAEoBRIuCg5Cb3VuZGluZ0Jv",
            "eE1pbhgDIAEoCzIWLlNPVUxTLlZlY3RvcjMuVmVjdG9yMxIuCg5Cb3VuZGlu",
            "Z0JveE1heBgEIAEoCzIWLlNPVUxTLlZlY3RvcjMuVmVjdG9yMxIPCgdVbmlj",
            "b2RlGAUgASgIEg0KBVVuazRBGAYgASgIEg0KBVVuazRDGAcgASgFEg0KBVVu",
            "azVDGAggASgFEg0KBVVuazVEGAkgASgFEg0KBVVuazY4GAogASgFIqkBCg9T",
            "ZWtpcm9VbmtTdHJ1Y3QSNgoITWVtYmVyczEYASADKAsyJC5TT1VMUy5GTFZF",
            "UjIuU2VraXJvVW5rU3RydWN0Lk1lbWJlchI2CghNZW1iZXJzMhgCIAMoCzIk",
            "LlNPVUxTLkZMVkVSMi5TZWtpcm9VbmtTdHJ1Y3QuTWVtYmVyGiYKBk1lbWJl",
            "chINCgVVbmswMBgBIAMoBRINCgVJbmRleBgCIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SOULS.Vector2.Vector2Reflection.Descriptor, global::SOULS.FLVER.FLVERReflection.Descriptor, global::SOULS.Vector3.Vector3Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.Material), global::SOULS.FLVER2.Material.Parser, new[]{ "Name", "MTD", "Flags", "Textures", "GXIndex", "Unk18" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.Texture), global::SOULS.FLVER2.Texture.Parser, new[]{ "Type", "Path", "Scale", "Unk10", "Unk11", "Unk14", "Unk18", "Unk1C" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.GXList), global::SOULS.FLVER2.GXList.Parser, new[]{ "TerminatorLength", "Capacity", "Count", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.GXItem), global::SOULS.FLVER2.GXItem.Parser, new[]{ "ID", "Unk04", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.Mesh), global::SOULS.FLVER2.Mesh.Parser, new[]{ "Dynamic", "MaterialIndex", "DefaultBoneIndex", "BoneIndices", "FaceSets", "VertexBuffers", "Vertices", "BoundingBox" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.Mesh.Types.BoundingBoxes), global::SOULS.FLVER2.Mesh.Types.BoundingBoxes.Parser, new[]{ "Min", "Max", "Unk" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.FaceSet), global::SOULS.FLVER2.FaceSet.Parser, new[]{ "Flags", "TriangleStrip", "CullBackfaces", "Unk06", "Indices" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.FaceSet.Types.FSFlags), global::SOULS.FLVER2.FaceSet.Types.FSFlags.Parser, new[]{ "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.VertexBuffer), global::SOULS.FLVER2.VertexBuffer.Parser, new[]{ "LayoutIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.BoundingBoxes), global::SOULS.FLVER2.BoundingBoxes.Parser, new[]{ "Min", "Max", "Unk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.BufferLayout), global::SOULS.FLVER2.BufferLayout.Parser, new[]{ "Size", "Capacity", "Count", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.Member), global::SOULS.FLVER2.Member.Parser, new[]{ "Unk00", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.FSFlags), global::SOULS.FLVER2.FSFlags.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.FLVERHeader), global::SOULS.FLVER2.FLVERHeader.Parser, new[]{ "BigEndian", "Version", "BoundingBoxMin", "BoundingBoxMax", "Unicode", "Unk4A", "Unk4C", "Unk5C", "Unk5D", "Unk68" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.SekiroUnkStruct), global::SOULS.FLVER2.SekiroUnkStruct.Parser, new[]{ "Members1", "Members2" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SOULS.FLVER2.SekiroUnkStruct.Types.Member), global::SOULS.FLVER2.SekiroUnkStruct.Types.Member.Parser, new[]{ "Unk00", "Index" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material(Material other) : this() {
      name_ = other.name_;
      mTD_ = other.mTD_;
      flags_ = other.flags_;
      textures_ = other.textures_.Clone();
      gXIndex_ = other.gXIndex_;
      unk18_ = other.unk18_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MTD" field.</summary>
    public const int MTDFieldNumber = 2;
    private string mTD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MTD {
      get { return mTD_; }
      set {
        mTD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "Textures" field.</summary>
    public const int TexturesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SOULS.FLVER2.Texture> _repeated_textures_codec
        = pb::FieldCodec.ForMessage(34, global::SOULS.FLVER2.Texture.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER2.Texture> textures_ = new pbc::RepeatedField<global::SOULS.FLVER2.Texture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER2.Texture> Textures {
      get { return textures_; }
    }

    /// <summary>Field number for the "GXIndex" field.</summary>
    public const int GXIndexFieldNumber = 5;
    private int gXIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GXIndex {
      get { return gXIndex_; }
      set {
        gXIndex_ = value;
      }
    }

    /// <summary>Field number for the "Unk18" field.</summary>
    public const int Unk18FieldNumber = 6;
    private int unk18_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk18 {
      get { return unk18_; }
      set {
        unk18_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (MTD != other.MTD) return false;
      if (Flags != other.Flags) return false;
      if(!textures_.Equals(other.textures_)) return false;
      if (GXIndex != other.GXIndex) return false;
      if (Unk18 != other.Unk18) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MTD.Length != 0) hash ^= MTD.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= textures_.GetHashCode();
      if (GXIndex != 0) hash ^= GXIndex.GetHashCode();
      if (Unk18 != 0) hash ^= Unk18.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (MTD.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MTD);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      textures_.WriteTo(output, _repeated_textures_codec);
      if (GXIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GXIndex);
      }
      if (Unk18 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Unk18);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MTD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MTD);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      size += textures_.CalculateSize(_repeated_textures_codec);
      if (GXIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GXIndex);
      }
      if (Unk18 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk18);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MTD.Length != 0) {
        MTD = other.MTD;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      textures_.Add(other.textures_);
      if (other.GXIndex != 0) {
        GXIndex = other.GXIndex;
      }
      if (other.Unk18 != 0) {
        Unk18 = other.Unk18;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            MTD = input.ReadString();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            textures_.AddEntriesFrom(input, _repeated_textures_codec);
            break;
          }
          case 40: {
            GXIndex = input.ReadInt32();
            break;
          }
          case 48: {
            Unk18 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Texture : pb::IMessage<Texture> {
    private static readonly pb::MessageParser<Texture> _parser = new pb::MessageParser<Texture>(() => new Texture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Texture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture(Texture other) : this() {
      type_ = other.type_;
      path_ = other.path_;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      unk10_ = other.unk10_;
      unk11_ = other.unk11_;
      unk14_ = other.unk14_;
      unk18_ = other.unk18_;
      unk1C_ = other.unk1C_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture Clone() {
      return new Texture(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::SOULS.Vector2.Vector2 scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector2.Vector2 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "Unk10" field.</summary>
    public const int Unk10FieldNumber = 4;
    private int unk10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk10 {
      get { return unk10_; }
      set {
        unk10_ = value;
      }
    }

    /// <summary>Field number for the "Unk11" field.</summary>
    public const int Unk11FieldNumber = 5;
    private bool unk11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unk11 {
      get { return unk11_; }
      set {
        unk11_ = value;
      }
    }

    /// <summary>Field number for the "Unk14" field.</summary>
    public const int Unk14FieldNumber = 6;
    private float unk14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Unk14 {
      get { return unk14_; }
      set {
        unk14_ = value;
      }
    }

    /// <summary>Field number for the "Unk18" field.</summary>
    public const int Unk18FieldNumber = 7;
    private float unk18_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Unk18 {
      get { return unk18_; }
      set {
        unk18_ = value;
      }
    }

    /// <summary>Field number for the "Unk1C" field.</summary>
    public const int Unk1CFieldNumber = 8;
    private float unk1C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Unk1C {
      get { return unk1C_; }
      set {
        unk1C_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Texture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Texture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Path != other.Path) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (Unk10 != other.Unk10) return false;
      if (Unk11 != other.Unk11) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Unk14, other.Unk14)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Unk18, other.Unk18)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Unk1C, other.Unk1C)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (Unk10 != 0) hash ^= Unk10.GetHashCode();
      if (Unk11 != false) hash ^= Unk11.GetHashCode();
      if (Unk14 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Unk14);
      if (Unk18 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Unk18);
      if (Unk1C != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Unk1C);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (Unk10 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Unk10);
      }
      if (Unk11 != false) {
        output.WriteRawTag(40);
        output.WriteBool(Unk11);
      }
      if (Unk14 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Unk14);
      }
      if (Unk18 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Unk18);
      }
      if (Unk1C != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Unk1C);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (Unk10 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk10);
      }
      if (Unk11 != false) {
        size += 1 + 1;
      }
      if (Unk14 != 0F) {
        size += 1 + 4;
      }
      if (Unk18 != 0F) {
        size += 1 + 4;
      }
      if (Unk1C != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Texture other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::SOULS.Vector2.Vector2();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.Unk10 != 0) {
        Unk10 = other.Unk10;
      }
      if (other.Unk11 != false) {
        Unk11 = other.Unk11;
      }
      if (other.Unk14 != 0F) {
        Unk14 = other.Unk14;
      }
      if (other.Unk18 != 0F) {
        Unk18 = other.Unk18;
      }
      if (other.Unk1C != 0F) {
        Unk1C = other.Unk1C;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            if (scale_ == null) {
              Scale = new global::SOULS.Vector2.Vector2();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 32: {
            Unk10 = input.ReadInt32();
            break;
          }
          case 40: {
            Unk11 = input.ReadBool();
            break;
          }
          case 53: {
            Unk14 = input.ReadFloat();
            break;
          }
          case 61: {
            Unk18 = input.ReadFloat();
            break;
          }
          case 69: {
            Unk1C = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GXList : pb::IMessage<GXList> {
    private static readonly pb::MessageParser<GXList> _parser = new pb::MessageParser<GXList>(() => new GXList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GXList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GXList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GXList(GXList other) : this() {
      terminatorLength_ = other.terminatorLength_;
      capacity_ = other.capacity_;
      count_ = other.count_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GXList Clone() {
      return new GXList(this);
    }

    /// <summary>Field number for the "TerminatorLength" field.</summary>
    public const int TerminatorLengthFieldNumber = 1;
    private int terminatorLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerminatorLength {
      get { return terminatorLength_; }
      set {
        terminatorLength_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private int capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::SOULS.FLVER2.GXItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER2.GXItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GXList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GXList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TerminatorLength != other.TerminatorLength) return false;
      if (Capacity != other.Capacity) return false;
      if (Count != other.Count) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TerminatorLength != 0) hash ^= TerminatorLength.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TerminatorLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TerminatorLength);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Capacity);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TerminatorLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TerminatorLength);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GXList other) {
      if (other == null) {
        return;
      }
      if (other.TerminatorLength != 0) {
        TerminatorLength = other.TerminatorLength;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.FLVER2.GXItem();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TerminatorLength = input.ReadInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34: {
            if (item_ == null) {
              Item = new global::SOULS.FLVER2.GXItem();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GXItem : pb::IMessage<GXItem> {
    private static readonly pb::MessageParser<GXItem> _parser = new pb::MessageParser<GXItem>(() => new GXItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GXItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GXItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GXItem(GXItem other) : this() {
      iD_ = other.iD_;
      unk04_ = other.unk04_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GXItem Clone() {
      return new GXItem(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Unk04" field.</summary>
    public const int Unk04FieldNumber = 2;
    private int unk04_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk04 {
      get { return unk04_; }
      set {
        unk04_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_data_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> data_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GXItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GXItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Unk04 != other.Unk04) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Unk04 != 0) hash ^= Unk04.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Unk04 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Unk04);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Unk04 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk04);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GXItem other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Unk04 != 0) {
        Unk04 = other.Unk04;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 16: {
            Unk04 = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh(Mesh other) : this() {
      dynamic_ = other.dynamic_;
      materialIndex_ = other.materialIndex_;
      defaultBoneIndex_ = other.defaultBoneIndex_;
      boneIndices_ = other.boneIndices_.Clone();
      faceSets_ = other.faceSets_.Clone();
      vertexBuffers_ = other.vertexBuffers_.Clone();
      vertices_ = other.vertices_.Clone();
      boundingBox_ = other.boundingBox_ != null ? other.boundingBox_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "Dynamic" field.</summary>
    public const int DynamicFieldNumber = 1;
    private int dynamic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dynamic {
      get { return dynamic_; }
      set {
        dynamic_ = value;
      }
    }

    /// <summary>Field number for the "MaterialIndex" field.</summary>
    public const int MaterialIndexFieldNumber = 2;
    private int materialIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaterialIndex {
      get { return materialIndex_; }
      set {
        materialIndex_ = value;
      }
    }

    /// <summary>Field number for the "DefaultBoneIndex" field.</summary>
    public const int DefaultBoneIndexFieldNumber = 3;
    private int defaultBoneIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultBoneIndex {
      get { return defaultBoneIndex_; }
      set {
        defaultBoneIndex_ = value;
      }
    }

    /// <summary>Field number for the "BoneIndices" field.</summary>
    public const int BoneIndicesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_boneIndices_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> boneIndices_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BoneIndices {
      get { return boneIndices_; }
    }

    /// <summary>Field number for the "FaceSets" field.</summary>
    public const int FaceSetsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SOULS.FLVER2.FaceSet> _repeated_faceSets_codec
        = pb::FieldCodec.ForMessage(42, global::SOULS.FLVER2.FaceSet.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER2.FaceSet> faceSets_ = new pbc::RepeatedField<global::SOULS.FLVER2.FaceSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER2.FaceSet> FaceSets {
      get { return faceSets_; }
    }

    /// <summary>Field number for the "VertexBuffers" field.</summary>
    public const int VertexBuffersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SOULS.FLVER2.VertexBuffer> _repeated_vertexBuffers_codec
        = pb::FieldCodec.ForMessage(50, global::SOULS.FLVER2.VertexBuffer.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER2.VertexBuffer> vertexBuffers_ = new pbc::RepeatedField<global::SOULS.FLVER2.VertexBuffer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER2.VertexBuffer> VertexBuffers {
      get { return vertexBuffers_; }
    }

    /// <summary>Field number for the "Vertices" field.</summary>
    public const int VerticesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SOULS.FLVER.Vertex> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(58, global::SOULS.FLVER.Vertex.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER.Vertex> vertices_ = new pbc::RepeatedField<global::SOULS.FLVER.Vertex>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER.Vertex> Vertices {
      get { return vertices_; }
    }

    /// <summary>Field number for the "BoundingBox" field.</summary>
    public const int BoundingBoxFieldNumber = 8;
    private global::SOULS.FLVER2.Mesh.Types.BoundingBoxes boundingBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER2.Mesh.Types.BoundingBoxes BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dynamic != other.Dynamic) return false;
      if (MaterialIndex != other.MaterialIndex) return false;
      if (DefaultBoneIndex != other.DefaultBoneIndex) return false;
      if(!boneIndices_.Equals(other.boneIndices_)) return false;
      if(!faceSets_.Equals(other.faceSets_)) return false;
      if(!vertexBuffers_.Equals(other.vertexBuffers_)) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dynamic != 0) hash ^= Dynamic.GetHashCode();
      if (MaterialIndex != 0) hash ^= MaterialIndex.GetHashCode();
      if (DefaultBoneIndex != 0) hash ^= DefaultBoneIndex.GetHashCode();
      hash ^= boneIndices_.GetHashCode();
      hash ^= faceSets_.GetHashCode();
      hash ^= vertexBuffers_.GetHashCode();
      hash ^= vertices_.GetHashCode();
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dynamic != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dynamic);
      }
      if (MaterialIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaterialIndex);
      }
      if (DefaultBoneIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultBoneIndex);
      }
      boneIndices_.WriteTo(output, _repeated_boneIndices_codec);
      faceSets_.WriteTo(output, _repeated_faceSets_codec);
      vertexBuffers_.WriteTo(output, _repeated_vertexBuffers_codec);
      vertices_.WriteTo(output, _repeated_vertices_codec);
      if (boundingBox_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BoundingBox);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dynamic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dynamic);
      }
      if (MaterialIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaterialIndex);
      }
      if (DefaultBoneIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultBoneIndex);
      }
      size += boneIndices_.CalculateSize(_repeated_boneIndices_codec);
      size += faceSets_.CalculateSize(_repeated_faceSets_codec);
      size += vertexBuffers_.CalculateSize(_repeated_vertexBuffers_codec);
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      if (other.Dynamic != 0) {
        Dynamic = other.Dynamic;
      }
      if (other.MaterialIndex != 0) {
        MaterialIndex = other.MaterialIndex;
      }
      if (other.DefaultBoneIndex != 0) {
        DefaultBoneIndex = other.DefaultBoneIndex;
      }
      boneIndices_.Add(other.boneIndices_);
      faceSets_.Add(other.faceSets_);
      vertexBuffers_.Add(other.vertexBuffers_);
      vertices_.Add(other.vertices_);
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          BoundingBox = new global::SOULS.FLVER2.Mesh.Types.BoundingBoxes();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dynamic = input.ReadInt32();
            break;
          }
          case 16: {
            MaterialIndex = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultBoneIndex = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            boneIndices_.AddEntriesFrom(input, _repeated_boneIndices_codec);
            break;
          }
          case 42: {
            faceSets_.AddEntriesFrom(input, _repeated_faceSets_codec);
            break;
          }
          case 50: {
            vertexBuffers_.AddEntriesFrom(input, _repeated_vertexBuffers_codec);
            break;
          }
          case 58: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
          case 66: {
            if (boundingBox_ == null) {
              BoundingBox = new global::SOULS.FLVER2.Mesh.Types.BoundingBoxes();
            }
            input.ReadMessage(BoundingBox);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mesh message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BoundingBoxes : pb::IMessage<BoundingBoxes> {
        private static readonly pb::MessageParser<BoundingBoxes> _parser = new pb::MessageParser<BoundingBoxes>(() => new BoundingBoxes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BoundingBoxes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SOULS.FLVER2.Mesh.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoundingBoxes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoundingBoxes(BoundingBoxes other) : this() {
          min_ = other.min_ != null ? other.min_.Clone() : null;
          max_ = other.max_ != null ? other.max_.Clone() : null;
          unk_ = other.unk_ != null ? other.unk_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoundingBoxes Clone() {
          return new BoundingBoxes(this);
        }

        /// <summary>Field number for the "Min" field.</summary>
        public const int MinFieldNumber = 1;
        private global::SOULS.Vector3.Vector3 min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SOULS.Vector3.Vector3 Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }

        /// <summary>Field number for the "Max" field.</summary>
        public const int MaxFieldNumber = 2;
        private global::SOULS.Vector3.Vector3 max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SOULS.Vector3.Vector3 Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        /// <summary>Field number for the "Unk" field.</summary>
        public const int UnkFieldNumber = 3;
        private global::SOULS.Vector3.Vector3 unk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SOULS.Vector3.Vector3 Unk {
          get { return unk_; }
          set {
            unk_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BoundingBoxes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BoundingBoxes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Min, other.Min)) return false;
          if (!object.Equals(Max, other.Max)) return false;
          if (!object.Equals(Unk, other.Unk)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (min_ != null) hash ^= Min.GetHashCode();
          if (max_ != null) hash ^= Max.GetHashCode();
          if (unk_ != null) hash ^= Unk.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (min_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Min);
          }
          if (max_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Max);
          }
          if (unk_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Unk);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (min_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Min);
          }
          if (max_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Max);
          }
          if (unk_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unk);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BoundingBoxes other) {
          if (other == null) {
            return;
          }
          if (other.min_ != null) {
            if (min_ == null) {
              Min = new global::SOULS.Vector3.Vector3();
            }
            Min.MergeFrom(other.Min);
          }
          if (other.max_ != null) {
            if (max_ == null) {
              Max = new global::SOULS.Vector3.Vector3();
            }
            Max.MergeFrom(other.Max);
          }
          if (other.unk_ != null) {
            if (unk_ == null) {
              Unk = new global::SOULS.Vector3.Vector3();
            }
            Unk.MergeFrom(other.Unk);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (min_ == null) {
                  Min = new global::SOULS.Vector3.Vector3();
                }
                input.ReadMessage(Min);
                break;
              }
              case 18: {
                if (max_ == null) {
                  Max = new global::SOULS.Vector3.Vector3();
                }
                input.ReadMessage(Max);
                break;
              }
              case 26: {
                if (unk_ == null) {
                  Unk = new global::SOULS.Vector3.Vector3();
                }
                input.ReadMessage(Unk);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class FaceSet : pb::IMessage<FaceSet> {
    private static readonly pb::MessageParser<FaceSet> _parser = new pb::MessageParser<FaceSet>(() => new FaceSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceSet(FaceSet other) : this() {
      flags_ = other.flags_ != null ? other.flags_.Clone() : null;
      triangleStrip_ = other.triangleStrip_;
      cullBackfaces_ = other.cullBackfaces_;
      unk06_ = other.unk06_;
      indices_ = other.indices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceSet Clone() {
      return new FaceSet(this);
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 1;
    private global::SOULS.FLVER2.FaceSet.Types.FSFlags flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER2.FaceSet.Types.FSFlags Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "TriangleStrip" field.</summary>
    public const int TriangleStripFieldNumber = 2;
    private bool triangleStrip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TriangleStrip {
      get { return triangleStrip_; }
      set {
        triangleStrip_ = value;
      }
    }

    /// <summary>Field number for the "CullBackfaces" field.</summary>
    public const int CullBackfacesFieldNumber = 3;
    private bool cullBackfaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CullBackfaces {
      get { return cullBackfaces_; }
      set {
        cullBackfaces_ = value;
      }
    }

    /// <summary>Field number for the "Unk06" field.</summary>
    public const int Unk06FieldNumber = 4;
    private int unk06_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk06 {
      get { return unk06_; }
      set {
        unk06_ = value;
      }
    }

    /// <summary>Field number for the "Indices" field.</summary>
    public const int IndicesFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_indices_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> indices_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Indices {
      get { return indices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Flags, other.Flags)) return false;
      if (TriangleStrip != other.TriangleStrip) return false;
      if (CullBackfaces != other.CullBackfaces) return false;
      if (Unk06 != other.Unk06) return false;
      if(!indices_.Equals(other.indices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (flags_ != null) hash ^= Flags.GetHashCode();
      if (TriangleStrip != false) hash ^= TriangleStrip.GetHashCode();
      if (CullBackfaces != false) hash ^= CullBackfaces.GetHashCode();
      if (Unk06 != 0) hash ^= Unk06.GetHashCode();
      hash ^= indices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (flags_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Flags);
      }
      if (TriangleStrip != false) {
        output.WriteRawTag(16);
        output.WriteBool(TriangleStrip);
      }
      if (CullBackfaces != false) {
        output.WriteRawTag(24);
        output.WriteBool(CullBackfaces);
      }
      if (Unk06 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Unk06);
      }
      indices_.WriteTo(output, _repeated_indices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      if (TriangleStrip != false) {
        size += 1 + 1;
      }
      if (CullBackfaces != false) {
        size += 1 + 1;
      }
      if (Unk06 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk06);
      }
      size += indices_.CalculateSize(_repeated_indices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceSet other) {
      if (other == null) {
        return;
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          Flags = new global::SOULS.FLVER2.FaceSet.Types.FSFlags();
        }
        Flags.MergeFrom(other.Flags);
      }
      if (other.TriangleStrip != false) {
        TriangleStrip = other.TriangleStrip;
      }
      if (other.CullBackfaces != false) {
        CullBackfaces = other.CullBackfaces;
      }
      if (other.Unk06 != 0) {
        Unk06 = other.Unk06;
      }
      indices_.Add(other.indices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (flags_ == null) {
              Flags = new global::SOULS.FLVER2.FaceSet.Types.FSFlags();
            }
            input.ReadMessage(Flags);
            break;
          }
          case 16: {
            TriangleStrip = input.ReadBool();
            break;
          }
          case 24: {
            CullBackfaces = input.ReadBool();
            break;
          }
          case 32: {
            Unk06 = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            indices_.AddEntriesFrom(input, _repeated_indices_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FaceSet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FSFlags : pb::IMessage<FSFlags> {
        private static readonly pb::MessageParser<FSFlags> _parser = new pb::MessageParser<FSFlags>(() => new FSFlags());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FSFlags> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SOULS.FLVER2.FaceSet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FSFlags() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FSFlags(FSFlags other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FSFlags Clone() {
          return new FSFlags(this);
        }

        /// <summary>Field number for the "value__" field.</summary>
        public const int ValueFieldNumber = 1;
        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FSFlags);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FSFlags other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FSFlags other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class VertexBuffer : pb::IMessage<VertexBuffer> {
    private static readonly pb::MessageParser<VertexBuffer> _parser = new pb::MessageParser<VertexBuffer>(() => new VertexBuffer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VertexBuffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBuffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBuffer(VertexBuffer other) : this() {
      layoutIndex_ = other.layoutIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VertexBuffer Clone() {
      return new VertexBuffer(this);
    }

    /// <summary>Field number for the "LayoutIndex" field.</summary>
    public const int LayoutIndexFieldNumber = 1;
    private int layoutIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayoutIndex {
      get { return layoutIndex_; }
      set {
        layoutIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VertexBuffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VertexBuffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LayoutIndex != other.LayoutIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LayoutIndex != 0) hash ^= LayoutIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LayoutIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LayoutIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LayoutIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayoutIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VertexBuffer other) {
      if (other == null) {
        return;
      }
      if (other.LayoutIndex != 0) {
        LayoutIndex = other.LayoutIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LayoutIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoundingBoxes : pb::IMessage<BoundingBoxes> {
    private static readonly pb::MessageParser<BoundingBoxes> _parser = new pb::MessageParser<BoundingBoxes>(() => new BoundingBoxes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoundingBoxes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBoxes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBoxes(BoundingBoxes other) : this() {
      min_ = other.min_ != null ? other.min_.Clone() : null;
      max_ = other.max_ != null ? other.max_.Clone() : null;
      unk_ = other.unk_ != null ? other.unk_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBoxes Clone() {
      return new BoundingBoxes(this);
    }

    /// <summary>Field number for the "Min" field.</summary>
    public const int MinFieldNumber = 1;
    private global::SOULS.Vector3.Vector3 min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 2;
    private global::SOULS.Vector3.Vector3 max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "Unk" field.</summary>
    public const int UnkFieldNumber = 3;
    private global::SOULS.Vector3.Vector3 unk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 Unk {
      get { return unk_; }
      set {
        unk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoundingBoxes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoundingBoxes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Min, other.Min)) return false;
      if (!object.Equals(Max, other.Max)) return false;
      if (!object.Equals(Unk, other.Unk)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (min_ != null) hash ^= Min.GetHashCode();
      if (max_ != null) hash ^= Max.GetHashCode();
      if (unk_ != null) hash ^= Unk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (min_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Min);
      }
      if (max_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Max);
      }
      if (unk_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Unk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (min_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Min);
      }
      if (max_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Max);
      }
      if (unk_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoundingBoxes other) {
      if (other == null) {
        return;
      }
      if (other.min_ != null) {
        if (min_ == null) {
          Min = new global::SOULS.Vector3.Vector3();
        }
        Min.MergeFrom(other.Min);
      }
      if (other.max_ != null) {
        if (max_ == null) {
          Max = new global::SOULS.Vector3.Vector3();
        }
        Max.MergeFrom(other.Max);
      }
      if (other.unk_ != null) {
        if (unk_ == null) {
          Unk = new global::SOULS.Vector3.Vector3();
        }
        Unk.MergeFrom(other.Unk);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (min_ == null) {
              Min = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Min);
            break;
          }
          case 18: {
            if (max_ == null) {
              Max = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Max);
            break;
          }
          case 26: {
            if (unk_ == null) {
              Unk = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(Unk);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferLayout : pb::IMessage<BufferLayout> {
    private static readonly pb::MessageParser<BufferLayout> _parser = new pb::MessageParser<BufferLayout>(() => new BufferLayout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferLayout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferLayout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferLayout(BufferLayout other) : this() {
      size_ = other.size_;
      capacity_ = other.capacity_;
      count_ = other.count_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferLayout Clone() {
      return new BufferLayout(this);
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 1;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private int capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::SOULS.FLVER.LayoutMember item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.FLVER.LayoutMember Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferLayout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferLayout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Capacity != other.Capacity) return false;
      if (Count != other.Count) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Size);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Capacity);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferLayout other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::SOULS.FLVER.LayoutMember();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadInt32();
            break;
          }
          case 16: {
            Capacity = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34: {
            if (item_ == null) {
              Item = new global::SOULS.FLVER.LayoutMember();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      unk00_ = other.unk00_.Clone();
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "Unk00" field.</summary>
    public const int Unk00FieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_unk00_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> unk00_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Unk00 {
      get { return unk00_; }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unk00_.Equals(other.unk00_)) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unk00_.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unk00_.WriteTo(output, _repeated_unk00_codec);
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unk00_.CalculateSize(_repeated_unk00_codec);
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      unk00_.Add(other.unk00_);
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            unk00_.AddEntriesFrom(input, _repeated_unk00_codec);
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FSFlags : pb::IMessage<FSFlags> {
    private static readonly pb::MessageParser<FSFlags> _parser = new pb::MessageParser<FSFlags>(() => new FSFlags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FSFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSFlags(FSFlags other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSFlags Clone() {
      return new FSFlags(this);
    }

    /// <summary>Field number for the "value__" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FSFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FSFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FSFlags other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FLVERHeader : pb::IMessage<FLVERHeader> {
    private static readonly pb::MessageParser<FLVERHeader> _parser = new pb::MessageParser<FLVERHeader>(() => new FLVERHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FLVERHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FLVERHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FLVERHeader(FLVERHeader other) : this() {
      bigEndian_ = other.bigEndian_;
      version_ = other.version_;
      boundingBoxMin_ = other.boundingBoxMin_ != null ? other.boundingBoxMin_.Clone() : null;
      boundingBoxMax_ = other.boundingBoxMax_ != null ? other.boundingBoxMax_.Clone() : null;
      unicode_ = other.unicode_;
      unk4A_ = other.unk4A_;
      unk4C_ = other.unk4C_;
      unk5C_ = other.unk5C_;
      unk5D_ = other.unk5D_;
      unk68_ = other.unk68_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FLVERHeader Clone() {
      return new FLVERHeader(this);
    }

    /// <summary>Field number for the "BigEndian" field.</summary>
    public const int BigEndianFieldNumber = 1;
    private bool bigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BigEndian {
      get { return bigEndian_; }
      set {
        bigEndian_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "BoundingBoxMin" field.</summary>
    public const int BoundingBoxMinFieldNumber = 3;
    private global::SOULS.Vector3.Vector3 boundingBoxMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 BoundingBoxMin {
      get { return boundingBoxMin_; }
      set {
        boundingBoxMin_ = value;
      }
    }

    /// <summary>Field number for the "BoundingBoxMax" field.</summary>
    public const int BoundingBoxMaxFieldNumber = 4;
    private global::SOULS.Vector3.Vector3 boundingBoxMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SOULS.Vector3.Vector3 BoundingBoxMax {
      get { return boundingBoxMax_; }
      set {
        boundingBoxMax_ = value;
      }
    }

    /// <summary>Field number for the "Unicode" field.</summary>
    public const int UnicodeFieldNumber = 5;
    private bool unicode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unicode {
      get { return unicode_; }
      set {
        unicode_ = value;
      }
    }

    /// <summary>Field number for the "Unk4A" field.</summary>
    public const int Unk4AFieldNumber = 6;
    private bool unk4A_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unk4A {
      get { return unk4A_; }
      set {
        unk4A_ = value;
      }
    }

    /// <summary>Field number for the "Unk4C" field.</summary>
    public const int Unk4CFieldNumber = 7;
    private int unk4C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk4C {
      get { return unk4C_; }
      set {
        unk4C_ = value;
      }
    }

    /// <summary>Field number for the "Unk5C" field.</summary>
    public const int Unk5CFieldNumber = 8;
    private int unk5C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk5C {
      get { return unk5C_; }
      set {
        unk5C_ = value;
      }
    }

    /// <summary>Field number for the "Unk5D" field.</summary>
    public const int Unk5DFieldNumber = 9;
    private int unk5D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk5D {
      get { return unk5D_; }
      set {
        unk5D_ = value;
      }
    }

    /// <summary>Field number for the "Unk68" field.</summary>
    public const int Unk68FieldNumber = 10;
    private int unk68_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unk68 {
      get { return unk68_; }
      set {
        unk68_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FLVERHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FLVERHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigEndian != other.BigEndian) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(BoundingBoxMin, other.BoundingBoxMin)) return false;
      if (!object.Equals(BoundingBoxMax, other.BoundingBoxMax)) return false;
      if (Unicode != other.Unicode) return false;
      if (Unk4A != other.Unk4A) return false;
      if (Unk4C != other.Unk4C) return false;
      if (Unk5C != other.Unk5C) return false;
      if (Unk5D != other.Unk5D) return false;
      if (Unk68 != other.Unk68) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BigEndian != false) hash ^= BigEndian.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (boundingBoxMin_ != null) hash ^= BoundingBoxMin.GetHashCode();
      if (boundingBoxMax_ != null) hash ^= BoundingBoxMax.GetHashCode();
      if (Unicode != false) hash ^= Unicode.GetHashCode();
      if (Unk4A != false) hash ^= Unk4A.GetHashCode();
      if (Unk4C != 0) hash ^= Unk4C.GetHashCode();
      if (Unk5C != 0) hash ^= Unk5C.GetHashCode();
      if (Unk5D != 0) hash ^= Unk5D.GetHashCode();
      if (Unk68 != 0) hash ^= Unk68.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BigEndian != false) {
        output.WriteRawTag(8);
        output.WriteBool(BigEndian);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (boundingBoxMin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BoundingBoxMin);
      }
      if (boundingBoxMax_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BoundingBoxMax);
      }
      if (Unicode != false) {
        output.WriteRawTag(40);
        output.WriteBool(Unicode);
      }
      if (Unk4A != false) {
        output.WriteRawTag(48);
        output.WriteBool(Unk4A);
      }
      if (Unk4C != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Unk4C);
      }
      if (Unk5C != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Unk5C);
      }
      if (Unk5D != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Unk5D);
      }
      if (Unk68 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Unk68);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BigEndian != false) {
        size += 1 + 1;
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (boundingBoxMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBoxMin);
      }
      if (boundingBoxMax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBoxMax);
      }
      if (Unicode != false) {
        size += 1 + 1;
      }
      if (Unk4A != false) {
        size += 1 + 1;
      }
      if (Unk4C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk4C);
      }
      if (Unk5C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk5C);
      }
      if (Unk5D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk5D);
      }
      if (Unk68 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unk68);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FLVERHeader other) {
      if (other == null) {
        return;
      }
      if (other.BigEndian != false) {
        BigEndian = other.BigEndian;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.boundingBoxMin_ != null) {
        if (boundingBoxMin_ == null) {
          BoundingBoxMin = new global::SOULS.Vector3.Vector3();
        }
        BoundingBoxMin.MergeFrom(other.BoundingBoxMin);
      }
      if (other.boundingBoxMax_ != null) {
        if (boundingBoxMax_ == null) {
          BoundingBoxMax = new global::SOULS.Vector3.Vector3();
        }
        BoundingBoxMax.MergeFrom(other.BoundingBoxMax);
      }
      if (other.Unicode != false) {
        Unicode = other.Unicode;
      }
      if (other.Unk4A != false) {
        Unk4A = other.Unk4A;
      }
      if (other.Unk4C != 0) {
        Unk4C = other.Unk4C;
      }
      if (other.Unk5C != 0) {
        Unk5C = other.Unk5C;
      }
      if (other.Unk5D != 0) {
        Unk5D = other.Unk5D;
      }
      if (other.Unk68 != 0) {
        Unk68 = other.Unk68;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigEndian = input.ReadBool();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            if (boundingBoxMin_ == null) {
              BoundingBoxMin = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(BoundingBoxMin);
            break;
          }
          case 34: {
            if (boundingBoxMax_ == null) {
              BoundingBoxMax = new global::SOULS.Vector3.Vector3();
            }
            input.ReadMessage(BoundingBoxMax);
            break;
          }
          case 40: {
            Unicode = input.ReadBool();
            break;
          }
          case 48: {
            Unk4A = input.ReadBool();
            break;
          }
          case 56: {
            Unk4C = input.ReadInt32();
            break;
          }
          case 64: {
            Unk5C = input.ReadInt32();
            break;
          }
          case 72: {
            Unk5D = input.ReadInt32();
            break;
          }
          case 80: {
            Unk68 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SekiroUnkStruct : pb::IMessage<SekiroUnkStruct> {
    private static readonly pb::MessageParser<SekiroUnkStruct> _parser = new pb::MessageParser<SekiroUnkStruct>(() => new SekiroUnkStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SekiroUnkStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SOULS.FLVER2.FLVER2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SekiroUnkStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SekiroUnkStruct(SekiroUnkStruct other) : this() {
      members1_ = other.members1_.Clone();
      members2_ = other.members2_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SekiroUnkStruct Clone() {
      return new SekiroUnkStruct(this);
    }

    /// <summary>Field number for the "Members1" field.</summary>
    public const int Members1FieldNumber = 1;
    private static readonly pb::FieldCodec<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member> _repeated_members1_codec
        = pb::FieldCodec.ForMessage(10, global::SOULS.FLVER2.SekiroUnkStruct.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member> members1_ = new pbc::RepeatedField<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member> Members1 {
      get { return members1_; }
    }

    /// <summary>Field number for the "Members2" field.</summary>
    public const int Members2FieldNumber = 2;
    private static readonly pb::FieldCodec<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member> _repeated_members2_codec
        = pb::FieldCodec.ForMessage(18, global::SOULS.FLVER2.SekiroUnkStruct.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member> members2_ = new pbc::RepeatedField<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SOULS.FLVER2.SekiroUnkStruct.Types.Member> Members2 {
      get { return members2_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SekiroUnkStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SekiroUnkStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members1_.Equals(other.members1_)) return false;
      if(!members2_.Equals(other.members2_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members1_.GetHashCode();
      hash ^= members2_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members1_.WriteTo(output, _repeated_members1_codec);
      members2_.WriteTo(output, _repeated_members2_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members1_.CalculateSize(_repeated_members1_codec);
      size += members2_.CalculateSize(_repeated_members2_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SekiroUnkStruct other) {
      if (other == null) {
        return;
      }
      members1_.Add(other.members1_);
      members2_.Add(other.members2_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members1_.AddEntriesFrom(input, _repeated_members1_codec);
            break;
          }
          case 18: {
            members2_.AddEntriesFrom(input, _repeated_members2_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SekiroUnkStruct message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Member : pb::IMessage<Member> {
        private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Member> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SOULS.FLVER2.SekiroUnkStruct.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member(Member other) : this() {
          unk00_ = other.unk00_.Clone();
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member Clone() {
          return new Member(this);
        }

        /// <summary>Field number for the "Unk00" field.</summary>
        public const int Unk00FieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_unk00_codec
            = pb::FieldCodec.ForInt32(10);
        private readonly pbc::RepeatedField<int> unk00_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Unk00 {
          get { return unk00_; }
        }

        /// <summary>Field number for the "Index" field.</summary>
        public const int IndexFieldNumber = 2;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Member);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Member other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!unk00_.Equals(other.unk00_)) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= unk00_.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          unk00_.WriteTo(output, _repeated_unk00_codec);
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += unk00_.CalculateSize(_repeated_unk00_codec);
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Member other) {
          if (other == null) {
            return;
          }
          unk00_.Add(other.unk00_);
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                unk00_.AddEntriesFrom(input, _repeated_unk00_codec);
                break;
              }
              case 16: {
                Index = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
